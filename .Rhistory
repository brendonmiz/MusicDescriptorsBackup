font.labels = 'bold',
# alpha.lines = .75, size.lines = 3
)
partialfsmap.t <- MFA_FMap.t$zeMap +
label4Map.t +
map4PFS.t$linesColByItems +
map4PFS.t$pointsColByItems +
map4PFS.t$labelsColByItems +
ggtitle("Contributions to the Adjectives Factor Scores")
print(partialfsmap)
print(partialfsmap.t)
#grid.arrange(as.grob(partialfsmap),
#             as.grob(partialfsmap.t),
#             ncol = 2, nrow = 1,
#             top = textGrob("Partial Factor Scores Plots for French and American Participants")
#             )
mfasbs <- recordPlot()
library(TExPosition)
library(TInPosition)
library(data4PCCAR)
pls.res <- tepPLS(dimcontingency, adjcontingency, DESIGN = adj.design$thedesign[-c(6,14)])
rm(list = ls())
load("catadatamusdim.RData")
load("adj.catadata.list.RData")
load("adjdesign.RData")
load("adjectivecolors.RData")
source('~/GitHub/MusicDescriptorsBackup/barplot_sigonly.R')
dimcontingency <- catadata.list$contingency
adjcontingency <- adj.catadata.list$adjcontingency
dimcontingency <- dimcontingency[-c(6,14),-9]
adjcontingency <- adjcontingency[-c(6,14),]
library(TExPosition)
library(TInPosition)
library(data4PCCAR)
pls.res <- tepPLS(dimcontingency, adjcontingency, DESIGN = adj.design$thedesign[-c(6,14)])
resPerm4PLSC <- perm4PLSC(dimcontingency, adjcontingency, nIter = 1000)
e1 <- pls.res$TExPosition.Data$eigs[1]
e2 <- pls.res$TExPosition.Data$eigs[2]
e3 <- pls.res$TExPosition.Data$eigs[3]
t1 <- pls.res$TExPosition.Data$t[1]
t2 <- pls.res$TExPosition.Data$t[2]
t3 <- pls.res$TExPosition.Data$t[3]
t4 <- pls.res$TExPosition.Data$t[4]
PlotScree(ev = pls.res$TExPosition.Data$eigs,
p.ev = resPerm4PLSC$pEigenvalues,
title = 'PLSC Music Features: Inertia Scree Plot',
plotKaiser = TRUE,
color4Kaiser = ggplot2::alpha('darkorchid4', .5),
lwd4Kaiser  = 2
)
a000.scree4plsc <-  recordPlot()
ps <- pls.res$TExPosition.Data$pdq$p
qs <- pls.res$TExPosition.Data$pdq$q
th <- .7
pslist <- vector(mode = "list", length = 2)
qslist <- vector(mode = "list", length= 2)
names(qslist) <- c("Dim1", "Dim2")
names(pslist) <- c("Dim1", "Dim2")
p.names <- rownames(ps)
q.names <- rownames(qs)
for (i in 1:2){
pslist[[i]] <- ps[which(abs(ps[,i]) > th*max(abs(ps[,i]))),i]
qslist[[i]] <- qs[which(abs(qs[,i]) > th*max(abs(qs[,i]))),i]
names(pslist[[i]]) <- p.names[abs(ps[,i]) > th*max(abs(ps[,i]))]
names(qslist[[i]]) <- q.names[abs(qs[,i]) > th*max(abs(qs[,i]))]
}
colors4plsc <- vector(mode = "list", length = 5)
names(colors4plsc) <- c("colors", "p.all","q.all","p.vec", "q.vec" )
colors4plsc$colors <- c(wes_palettes$Darjeeling1[c(1,2,4)],
wes_palettes$Darjeeling2[2])
colors4plsc$p.all <- ps
colors4plsc$p.all[colors4plsc$p.all > 0] <- colors4plsc$colors[1]
colors4plsc$p.all[colors4plsc$p.all != colors4plsc$colors[1]] <- colors4plsc$colors[2]
colors4plsc$q.all <- qs
colors4plsc$q.all[colors4plsc$q.all > 0] <- colors4plsc$colors[3]
colors4plsc$q.all[colors4plsc$q.all != colors4plsc$colors[3]] <- colors4plsc$colors[4]
colors4plsc$p.vec <- vector(mode = "list", length = 2)
colors4plsc$q.vec <- vector(mode = "list", length = 2)
names(colors4plsc$p.vec) <- c("Dim1", "Dim2")
names(colors4plsc$q.vec) <- c("Dim1", "Dim2")
for (i in 1:2){
colors4plsc$p.vec[[i]] <- colors4plsc$p.all[which(abs(ps[,i]) > th*max(abs(ps[,i]))),i]
colors4plsc$q.vec[[i]] <- colors4plsc$q.all[which(abs(qs[,i]) > th*max(abs(qs[,i]))),i]
}
loading1 <- PrettyBarPlot2(bootratio = c(pslist$Dim1, qslist$Dim1),
threshold = min(c(th*max(abs(ps[,1])), th*max(abs(qs[,1])))),
ylim = c(1.2*min(c(pslist$Dim1, qslist$Dim1)), 1.2*max(c(pslist$Dim1, qslist$Dim1))),
color4bar = c(colors4plsc$p.vec$Dim1, colors4plsc$q.vec$Dim1),
color4ns = "gray75",
plotnames = TRUE,
main = 'Loadings for variables on the factor plot for LV 1',
ylab = "Signed Loadings"
#font.size = 1
)
loading2 <- PrettyBarPlot2(bootratio = c(pslist$Dim2, qslist$Dim2),
threshold = min(c(th*max(abs(ps[,2])), th*max(abs(qs[,2])))),
ylim = c(1.2*min(c(pslist$Dim2, qslist$Dim2)), 1.2*max(c(pslist$Dim2, qslist$Dim2))),
color4bar = c(colors4plsc$p.vec$Dim2, colors4plsc$q.vec$Dim2),
color4ns = "gray75",
plotnames = TRUE,
main = 'Loadings for variables on the factor plot for LV 2',
ylab = "Signed Loadings",
#font.size = 1
)
grid.arrange(as.grob(loading1),
as.grob(loading2),
ncol = 2,nrow = 1
)
loads_plsc <- recordPlot()
ctri <- pls.res$TExPosition.Data$ci*sign(pls.res$TExPosition.Data$fi)
ctrj <- pls.res$TExPosition.Data$cj * sign(pls.res$TExPosition.Data$fj)
conts.sigonly <- barplot.sigonly(x = ctri,
y = ctrj,
th = "mean",
type = "cont")
contribution1 <- PrettyBarPlot2(bootratio = conts.sigonly$data$Dim1,
threshold = conts.sigonly$t.hold$thr.tog,
ylim = conts.sigonly$data$y.limits$ylims.tog$Dim1,
color4bar = c(conts.sigonly$color$x.vec$Dim1, conts.sigonly$color$y.vec$Dim1),
color4ns = "gray75",
plotnames = TRUE,
main = 'Contributions to the First LV',
ylab = "Signed Contributions"
#font.size = 1
)
contribution2 <- PrettyBarPlot2(bootratio = conts.sigonly$data$Dim2,
threshold = conts.sigonly$t.hold$thr.tog,
ylim =conts.sigonly$data$y.limits$ylims.tog$Dim2,
color4bar = c(conts.sigonly$color$x.vec$Dim2, conts.sigonly$color$y.vec$Dim2),
color4ns = "gray75",
plotnames = TRUE,
main = 'Contributions to the Second LV',
ylab = "Signed Contributions",
#font.size = 1
)
grid.arrange(as.grob(contribution1),
as.grob(contribution2),
ncol = 1,nrow = 2
)
contributionsplsc <- recordPlot()
latvar.1 <- cbind(pls.res$TExPosition.Data$lx[,1],pls.res$TExPosition.Data$ly[,1])
colnames(latvar.1) <- c("Lx 1", "Ly 1")
zedesign <- adj.design$thedesign[-c(6,14)]
lescoleurs <- adj.design$ex.cols[-c(6,14)]
coleur4group <- adj.design$col4exgrp
rownames(latvar.1) <- c(1:5,7:13,15:30)
# compute means
lv.1.group <- getMeans(latvar.1, zedesign)
# get bootstrap intervals of groups
lv.1.group.boot <- Boot4Mean(latvar.1, zedesign)
colnames(lv.1.group.boot$BootCube) <- c("Lx 1", "Ly 1")
#Next, we can start plotting:
plot.lv1 <- createFactorMap(latvar.1,
col.points = lescoleurs,
col.labels = lescoleurs,
alpha.points = 0.8, alpha.labels = 0.8,
text.cex = 5, title = "Latent Variable Plot 1"
)
plot1.mean <- createFactorMap(lv.1.group,
col.points = coleur4group,
col.labels = coleur4group,
cex = 4,
pch = 17,
alpha.points = 0.4,
alpha.labels = 0.4,
text.cex = 6)
plot1.meanCI <- MakeCIEllipses(lv.1.group.boot$BootCube[,c(1:2),], # get the first two components
col = adj.design$col4exgrp,
names.of.factors = c("Lx 1", "Ly 1"), alpha.ellipse = .2,
alpha.line = 0
)
plot1 <- plot.lv1$zeMap_background + plot.lv1$zeMap_dots + plot.lv1$zeMap_text +
plot1.mean$zeMap_text + plot1.meanCI
latvar.2 <- cbind(pls.res$TExPosition.Data$lx[,2],pls.res$TExPosition.Data$ly[,2])
colnames(latvar.2) <- c("Lx 2", "Ly 2")
rownames(latvar.2) <- c(1:5,7:13,15:30)
# compute means
lv.2.group <- getMeans(latvar.2, zedesign)
# get bootstrap intervals of groups
lv.2.group.boot <- Boot4Mean(latvar.2, zedesign)
colnames(lv.2.group.boot$BootCube) <- c("Lx 2", "Ly 2")
#Next, we can start plotting:
plot.lv2 <- createFactorMap(latvar.2,
col.points = lescoleurs,
col.labels = lescoleurs,
alpha.points = 0.8, alpha.labels = 0.8,
text.cex = 5, title = "Latent Variable Plot 2"
)
plot2.mean <- createFactorMap(lv.2.group,
col.points = coleur4group,
col.labels = coleur4group,
cex = 4,
pch = 17,
alpha.points = 0.4,
alpha.labels = 0.5,
text.cex = 6)
plot2.meanCI <- MakeCIEllipses(lv.2.group.boot$BootCube[,c(1:2),], # get the first two components
col = coleur4group,
names.of.factors = c("Lx 2", "Ly 2"), alpha.ellipse = .2,
alpha.line = 0
)
plot2 <- plot.lv2$zeMap_background + plot.lv2$zeMap_dots + plot.lv2$zeMap_text +
plot2.mean$zeMap_text + plot2.meanCI
grid.arrange(as.grob(plot1),
as.grob(plot2),
ncol = 2,nrow = 1
)
plsc.fplot <- recordPlot()
grid.arrange(as.grob(plot1),
as.grob(plot2),
ncol = 2,nrow = 1
)
dev.flush()
grid.arrange(as.grob(plot1),
as.grob(plot2),
ncol = 2,nrow = 1
)
plsc.fplot <- recordPlot()
latvar.1 <- cbind(pls.res$TExPosition.Data$lx[,1],pls.res$TExPosition.Data$ly[,1])
colnames(latvar.1) <- c("Lx 1", "Ly 1")
zedesign <- adj.design$thedesign[-c(6,14)]
lescoleurs <- adj.design$ex.cols[-c(6,14)]
coleur4group <- adj.design$col4exgrp
rownames(latvar.1) <- c(1:5,7:13,15:30)
# compute means
lv.1.group <- getMeans(latvar.1, zedesign)
# get bootstrap intervals of groups
lv.1.group.boot <- Boot4Mean(latvar.1, zedesign)
colnames(lv.1.group.boot$BootCube) <- c("Lx 1", "Ly 1")
#Next, we can start plotting:
plot.lv1 <- createFactorMap(latvar.1,
col.points = lescoleurs,
col.labels = lescoleurs,
alpha.points = 0.8, alpha.labels = 0.8,
text.cex = 5, title = "Latent Variable Plot 1"
)
plot1.mean <- createFactorMap(lv.1.group,
col.points = coleur4group,
col.labels = coleur4group,
cex = 4,
pch = 17,
alpha.points = 0.4,
alpha.labels = 0.4,
text.cex = 6)
plot1.meanCI <- MakeCIEllipses(lv.1.group.boot$BootCube[,c(1:2),], # get the first two components
col = adj.design$col4exgrp,
names.of.factors = c("Lx 1", "Ly 1"), alpha.ellipse = .2,
alpha.line = 0
)
plot1 <- plot.lv1$zeMap_background + plot.lv1$zeMap_dots + plot.lv1$zeMap_text +
plot1.mean$zeMap_text + plot1.meanCI
latvar.2 <- cbind(pls.res$TExPosition.Data$lx[,2],pls.res$TExPosition.Data$ly[,2])
colnames(latvar.2) <- c("Lx 2", "Ly 2")
rownames(latvar.2) <- c(1:5,7:13,15:30)
# compute means
lv.2.group <- getMeans(latvar.2, zedesign)
# get bootstrap intervals of groups
lv.2.group.boot <- Boot4Mean(latvar.2, zedesign)
colnames(lv.2.group.boot$BootCube) <- c("Lx 2", "Ly 2")
#Next, we can start plotting:
plot.lv2 <- createFactorMap(latvar.2,
col.points = lescoleurs,
col.labels = lescoleurs,
alpha.points = 0.8, alpha.labels = 0.8,
text.cex = 5, title = "Latent Variable Plot 2"
)
plot2.mean <- createFactorMap(lv.2.group,
col.points = coleur4group,
col.labels = coleur4group,
cex = 4,
pch = 17,
alpha.points = 0.4,
alpha.labels = 0.5,
text.cex = 6)
plot2.meanCI <- MakeCIEllipses(lv.2.group.boot$BootCube[,c(1:2),], # get the first two components
col = coleur4group,
names.of.factors = c("Lx 2", "Ly 2"), alpha.ellipse = .2,
alpha.line = 0
)
plot2 <- plot.lv2$zeMap_background + plot.lv2$zeMap_dots + plot.lv2$zeMap_text +
plot2.mean$zeMap_text + plot2.meanCI
grid.arrange(as.grob(plot1),
as.grob(plot2),
ncol = 2,nrow = 1
)
plsc.fplot <- recordPlot()
wordcountaddin:::text_stats()
# Seed for random number generation
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, fig.align = "center",cache.extra = knitr::rand_seed)
set.seed(42)
papaja::r_refs("r-references.bib")
load("catadatamusdim.RData")
musdimdata <- catadata.list$contingency
numberofdims <- catadata.list$numberofdims
thebrick <- catadata.list$thebrick
rows2drop <- c(6,14)
musdimdata.no6 <- musdimdata[-rows2drop,]
thebrick.no6 <- thebrick[-rows2drop,,]
numberofdims
# Seed for random number generation
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, fig.align = "center",cache.extra = knitr::rand_seed)
set.seed(42)
papaja::r_refs("r-references.bib")
library("papaja")
suppressMessages(library(ExPosition))
suppressMessages(library(InPosition))
suppressMessages(library(MExPosition))
library(PTCA4CATA)
library(purrr)
library(plyr)
library(tidyverse)
library(readxl)
library(stringr)
library(stringi)
library(rlist)
library(wesanderson)
#library(kableExtra)
library(ggplotify)
library(gridExtra)
library(grid)
library(abind)
powerpointFilename <- 'Music-Descriptor-Space.pptx'
path2pptx    <- './Analysis/'
name4Graphs  <- paste0(path2pptx,powerpointFilename)
title4Graphs <- 'Music Descriptor Space '
load("catadatamusdim.RData")
musdimdata <- catadata.list$contingency
numberofdims <- catadata.list$numberofdims
thebrick <- catadata.list$thebrick
rows2drop <- c(6,14)
musdimdata.no6 <- musdimdata[-rows2drop,]
thebrick.no6 <- thebrick[-rows2drop,,]
# reorder some of the columns in the french experts dataset,
# taking only the ones we want to analyse for now
fr.ex.data <- catadata.list$french.expert.data[c(1:3,6,7,9:12),c(1,4,5,6,7)]
colnames(fr.ex.data) <- c("age", "gen", "nat", "tr_yrs", "tr_type")
fr.ex.data$gen[which(fr.ex.data$gen == "Homme")] <- "M"
fr.ex.data$gen[which(fr.ex.data$gen == "Femme")] <- "F"
fr.ex.data$nat <- "FR"
fr.ex.data$tr_type[which(fr.ex.data$tr_type == "Instrumentale")] <- "Inst"
fr.ex.data$tr_type[which(fr.ex.data$tr_type == "Vocale")] <- "Voc"
am.ex.data <- catadata.list$expert.data[,c(1:3,6,7)]
colnames(am.ex.data) <- colnames(fr.ex.data)
am.ex.data$nat <- "AM"
am.ex.data$gen[which(am.ex.data$gen == "Male")] <- "M"
am.ex.data$gen[which(am.ex.data$gen == "Female")] <- "F"
am.ex.data$tr_type[which(am.ex.data$tr_type == "Instrumental")] <- "Inst"
am.ex.data$tr_type[which(am.ex.data$tr_type == "Vocal")] <- "Voc"
# Bind it all together
ex.data <- rbind(am.ex.data, fr.ex.data)
bygender <- as.factor(ex.data$gen)
bynationality <- as.factor(ex.data$nat)
dimcares.inf <- epCA.inference.battery(musdimdata.no6,
masses= NULL, weights= NULL,
hellinger = FALSE, symmetric = TRUE,
graphs =FALSE, test.iters = 1000)
# Factor Scores
FIsym  <- dimcares.inf$Fixed.Data$ExPosition.Data$fi
#FIasym <- RenormFi$G_A
FJs    <- dimcares.inf$Fixed.Data$ExPosition.Data$fj
CA.Q.Eigs <- dimcares.inf$Fixed.Data$ExPosition.Data$eigs
CA.Q.pEig <- dimcares.inf$Inference.Data$components$eigs.perm
# Participant colors:
col4M <- wes_palettes$Rushmore1[3]
col4F <- wes_palettes$Rushmore1[5]
col4FR <- wes_palettes$Darjeeling1[1]
col4AM <- wes_palettes$Darjeeling2[2]
#
col4byG <- as.character(bygender)
col4byG[col4byG == "F"] <- col4F
col4byG[col4byG == "M"] <- col4M
col4byN <- as.character(bynationality)
col4byN[col4byN == "FR"] <- col4FR
col4byN[col4byN == "AM"] <- col4AM
# To account for the fact that we removed some rows above:
numberofdims[c(1,7,8,9,10)] <- c(8,7,3,4,6)
numberofdims <- numberofdims[-11]
col4cols <- wes_palette("FantasticFox1",
length(numberofdims), type = "continuous")
col4cols <- rep(col4cols, numberofdims)
bootCA <- Boot4PTCA(ZeDataCube = thebrick.no6,
fi = FIsym,
fj = FJs,
eigs = CA.Q.Eigs,
nf2keep = 3,
nBootIter = 500)
# Compute Bootstrapped ratios
bootRatios.I <- PTCA4CATA::boot.ratio.test(bootCA$RowsBoot,
critical.value = 2)
bootRatios.J <- PTCA4CATA::boot.ratio.test(bootCA$ColumnsBoot,
critical.value = 2)
# Probabilities
probBR.I  <- bootRatios.I$prob.boot.ratios
probBR.J  <- bootRatios.J$prob.boot.ratios
# We have a problem here because most matrices
#  have lines with zeros. A symmetric difference matrix
#  would do better than an RV or a
#  chi2 distance so we use createSymDist4PTCA
Cmat.Q <- createSymDist4PTCA(thebrick)$CrossProduct
# Calculate the eigenvalues and the percentage of variance extracted (tau)
eigenCmat.Q <- eigen(Cmat.Q, symmetric = TRUE)
eig4Cmat.Q <-  eigenCmat.Q$values
tau4Cmat.Q <- round( (100*eig4Cmat.Q) / sum(eig4Cmat.Q))
# Calculate factor scores for the first three dimensions
nk       <- 3
F4Cmat.Q   <- eigenCmat.Q$vectors[,1:nk] %*% diag(eig4Cmat.Q[1:nk]^(1/2))
# Prep for plotting
Shortnames4Participants.Q <-  dimnames(thebrick[[3]])
rownames(F4Cmat.Q) <- Shortnames4Participants.Q
# Make labels
labels4RV.Q <- createxyLabels.gen(1,2,lambda = eig4Cmat.Q, tau = tau4Cmat.Q)
# Scree plot with significance
ScreeInf <- PlotScree(ev = eig4Cmat.Q,
max.ev = NULL, alpha = 0.05,
col.ns = "#006D2C", plotKaiser = TRUE,
title = "Participants Distance Analysis, Musical Qualities Survey: \nExplained Variance per Dimension")
a000.00.screeRV <-  recordPlot()
# Scree plot with significance
ScreeInf <- PlotScree(ev = eig4Cmat.Q,
max.ev = NULL, alpha = 0.05,
col.ns = "#006D2C", plotKaiser = TRUE,
title = "Participants Distance Analysis, Musical Qualities Survey: \nExplained Variance per Dimension")
BaseMap.Nationality <- createFactorMap(X = F4Cmat.Q ,
axis1 = 1, axis2 = 2,
display.points = TRUE,
col.points = col4byN,
pch = 19, cex = 2.5,
title = "Colored according to Nationality",
display.labels = TRUE,
col.labels = col4byN,
text.cex = 4, font.face = "bold",
font.family = "sans",
col.axes = "darkorchid",
alpha.axes = 0.2,
width.axes = 1.1,
col.background = adjustcolor("lavender",
alpha.f = 0.2),
force = 1, segment.size = 3)
BaseMap.Gender <- createFactorMap(X = F4Cmat.Q ,
axis1 = 1, axis2 = 2,
display.points = TRUE,
col.points = col4byG,
pch = 19, cex = 2.5,
title = "Colored according to Gender",
display.labels = TRUE,
col.labels = col4byG,
text.cex = 4, font.face = "bold",
font.family = "sans",
col.axes = "darkorchid",
alpha.axes = 0.2,
width.axes = 1.1,
col.background = adjustcolor("lavender",
alpha.f = 0.2),
force = 1, segment.size = 3)
gendermeans <- getMeans(F4Cmat.Q, bygender)
nationmeans <- getMeans(F4Cmat.Q, bynationality)
BootCube.N <- PTCA4CATA::Boot4Mean(F4Cmat.Q, design = bynationality,
niter = 100,
suppressProgressBar = TRUE)
dimnames(BootCube.N$BootCube)[[2]] <- paste0('Dimension ',
1: dim(BootCube.N$BootCube)[[2]])
BootCube.G <- PTCA4CATA::Boot4Mean(F4Cmat.Q, design = bygender,
niter = 100,
suppressProgressBar = TRUE)
dimnames(BootCube.G$BootCube)[[2]] <- paste0('Dimension ',
1: dim(BootCube.G$BootCube)[[2]])
n.ellipse <- MakeCIEllipses(BootCube.N$BootCube[,1:2,],
names.of.factors = c("Dimension 1","Dimension 2"),
col = c(col4AM, col4FR))
g.ellipse <- MakeCIEllipses(BootCube.G$BootCube[,1:2,],
names.of.factors = c("Dimension 1","Dimension 2"),
col = c(col4M, col4F))
n.symdist.means <- createFactorMap(nationmeans,
axis1 = 1, axis2 = 2,
title = "Colored according to Nationality",
col.points =  c(col4AM, col4FR),
alpha.points = 1, # no transparency
constraints = BaseMap.Nationality$constraints,
display.points = TRUE,
pch = 19, cex = 5,
display.labels = TRUE,
col.labels = c(col4AM, col4FR),
text.cex = 4,font.face = "bold",
font.family = "sans", col.axes = "darkorchid",
alpha.axes = 0.2, width.axes = 1.1,
col.background = adjustcolor("lavender", alpha.f = 0.2),
force = 1, segment.size = 0)
g.symdist.means <- createFactorMap(gendermeans,
axis1 = 1, axis2 = 2,
title = "Colored according to Gender",
col.points =  c(col4M, col4F),
alpha.points = 1, # no transparency
constraints = BaseMap.Gender$constraints,
display.points = TRUE,
pch = 19, cex = 5,
display.labels = TRUE,
col.labels = c(col4M, col4F),
text.cex = 4,font.face = "bold",
font.family = "sans", col.axes = "darkorchid",
alpha.axes = 0.2, width.axes = 1.1,
col.background = adjustcolor("lavender", alpha.f = 0.2),
force = 1, segment.size = 0)
a.01.map4part <- BaseMap.Nationality$zeMap_background + labels4RV.Q +
n.symdist.means$zeMap_dots + n.ellipse +
BaseMap.Nationality$zeMap_dots + n.symdist.means$zeMap_text
a.02.map4part <- BaseMap.Gender$zeMap_background + labels4RV.Q +
g.symdist.means$zeMap_dots + g.ellipse +
BaseMap.Gender$zeMap_dots + g.symdist.means$zeMap_text
grid.arrange(as.grob(a.01.map4part),
as.grob(a.02.map4part), ncol = 2,
top = textGrob("Factor Scores for Participants in the Qualities Survey",
gp = gpar(fontsize = 18, font = 3)))
