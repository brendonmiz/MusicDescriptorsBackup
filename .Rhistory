adjcolsfr <- do.call(cbind, adjcolsfr) %>% as.data.frame(.)
rownames(adjcolsfr) <- rownames(partcolsfr)
#adjcolsfr$Excerpt.16 <- paste(adjcolsfr$Excerpt.16, adjcolsfr$Excerpt.16.1, sep = ",")
#adjcolsfr$Excerpt.18 <- paste(adjcolsfr$Excerpt.17, adjcolsfr$Excerpt.18, sep = ",")
#adjcolsfr$Excerpt.17[c(1:length(adjcolsfr$Excerpt17))] <- ""
#adjcolsfr <- adjcolsfr[,-c(16,17,18)]
adjcolsfr <- adjcolsfr[,-c(17,18)]
adjcols <- adjcols[,-c(17)]
partcols <- rbind(partcols, partcolsfr)
adjcols <- rbind(adjcols, adjcolsfr)
nationalities <- partcols$nationality
# for the vector on this next line, manually call "unique(nationalities)"
# and look through for which elements of that vector make sense here.
findtheamericans <- unique(nationalities)[c(1,2,4,5,6,7,9,10,11,16,17,19,21,22,
27,28,30,31,32,35,36,38,39,40,41,42,
46,47,49,52,54,55,58,59,60,63,64,67,
68)]
rows2use <- c(which(partcols$nationality %in% findtheamericans),
which(partcols$nationality == "FR" | partcols$nationality == "FR-BE"))
adjcols <- adjcols[rows2use,]
partcols <- partcols[rows2use,]
partcols$nationality[partcols$nationality != "FR" & partcols$nationality != "FR-BE"] <- "US"
partcols$nationality[partcols$nationality != "US"] <- "France"
knitr::opts_chunk$set(echo = TRUE, cache = FALSE)
rm(list = ls())
library(ExPosition)
library(InPosition)
library(PTCA4CATA)
library(purrr)
library(tidyverse)
library(readxl)
library(stringr)
library(stringi)
library(wesanderson)
library(kableExtra)
library(ggplotify)
library(gridExtra)
library(grid)
library(abind)
powerpointFilename <- 'MusicalDescriptorsFigures.pptx'
path2pptx    <- '../Analysis/'
name4Graphs  <- paste0(path2pptx,powerpointFilename)
title4Graphs <- 'Musical Descriptors '
path2Data <- './Analysis/'
dataFilename1 <- 'MusDesc_US_data.csv'
path2file1 <- paste0(path2Data,dataFilename1)
# sheet2Read <- 'Data' Not necessary for this analysis,
# because the csv only has one sheet
fresh <- read.csv(path2file1)
dataFilename2 <- 'DescMusFeb4.csv'
path2file2 <- paste0(path2Data,dataFilename2) #this CSV is in the same fold
frdata <- read.csv(path2file2)
# remove the first two columns, which are qualtrics specific data
fresh <- fresh[-c(1,2),]
# remove all rows that were not completed.
fresh <- fresh[-c(which(fresh$Progress %s!==% "100")),]
#Select all columns that are adjective data
adjcols <- dplyr::select(fresh,contains("Excerpt"))
adjcolsfr <- dplyr::select(frdata,contains("Excerpt"))
# Dropping the qualtrics embedded rows and the first few participants, who were pilot participants
adjcols <- adjcols[-c(1:5), ]
rownames(adjcols) <- c(1:dim(adjcols)[[1]])
rownames(adjcolsfr) <- c((dim(adjcols)[[1]]+1):(dim(adjcols)[[1]]+dim(adjcolsfr)[[1]]))
#Select all columns that are participant data. We'll need this later
partcols <- fresh[ ,118:length(fresh)-1]
partcolsfr <- select(frdata, !contains("Excerpt"))
#Rename columns to something legible
colnames(partcolsfr) <- colnames(partcols) <- c("age", "gender", "nationality", "job", "job_writein", "tr_yrs", "tr_type",
"inst", "inf", "inf_inst", "inf_yrs", "cho", "cho_yrs",
"other_perf", "other_type", "other_yrs", "teach", "teach_yrs")
#Drop unusable rows and rename 1:end
partcols <- partcols[-c(1:5),]
rownames(partcols) <- rownames(adjcols)
rownames(partcolsfr) <- rownames(adjcolsfr)
translationFile <- 'translations.xlsx'
path2file3 <- paste0(path2Data, translationFile)
thetranslations <- data.frame(read_xlsx(path2file3, col_names = F))
frenchadjs <- thetranslations[,2]
englishadjs <- thetranslations[,1]
for(i in 1:length(frenchadjs)){
adjcolsfr <- map(adjcolsfr, ~gsub(coll(frenchadjs[i]), x = .,
replacement = englishadjs[i]))
}
adjcolsfr <- do.call(cbind, adjcolsfr) %>% as.data.frame(.)
rownames(adjcolsfr) <- rownames(partcolsfr)
#adjcolsfr$Excerpt.16 <- paste(adjcolsfr$Excerpt.16, adjcolsfr$Excerpt.16.1, sep = ",")
#adjcolsfr$Excerpt.18 <- paste(adjcolsfr$Excerpt.17, adjcolsfr$Excerpt.18, sep = ",")
#adjcolsfr$Excerpt.17[c(1:length(adjcolsfr$Excerpt17))] <- ""
#adjcolsfr <- adjcolsfr[,-c(16,17,18)]
adjcolsfr <- adjcolsfr[,-c(17,18)]
adjcols <- adjcols[,-c(17)]
partcols <- rbind(partcols, partcolsfr)
adjcols <- rbind(adjcols, adjcolsfr)
nationalities <- partcols$nationality
# for the vector on this next line, manually call "unique(nationalities)"
# and look through for which elements of that vector make sense here.
findtheamericans <- unique(nationalities)[c(1,2,4,5,6,7,9,10,11,16,17,19,21,22,
27,28,30,31,32,35,36,38,39,40,41,42,
46,47,49,52,54,55,58,59,60,63,64,67,
68)]
rows2use <- c(which(partcols$nationality %in% findtheamericans),
which(partcols$nationality == "FR" | partcols$nationality == "FR-BE"))
adjcols <- adjcols[rows2use,]
partcols <- partcols[rows2use,]
unique(partcols$nationality)
"Mexican" %in% partcols$nationality
partcols$nationality %in% "Mexican"
partcols$nationality[grep("Mexican", ignore.case = T)]
partcols$nationality[grep("Mexican",x = partcols$nationality ignore.case = T)]
partcols$nationality[grep("Mexican",x = partcols$nationality, ignore.case = T)]
partcols$nationality[grep("Indian",x = partcols$nationality ignore.case = T)]
partcols$nationality[grep("Indian",x = partcols$nationality, ignore.case = T)]
partcols$nationality[grep("Asian",x = partcols$nationality, ignore.case = T)]
partcols$nationality[grep("Nigerian",x = partcols$nationality, ignore.case = T)]
partcols$nationality[grep("pakistani",x = partcols$nationality, ignore.case = T)]
partcols$nationality[grep("Ethiopian",x = partcols$nationality, ignore.case = T)]
knitr::opts_chunk$set(echo = TRUE, cache = FALSE)
rm(list = ls())
library(ExPosition)
library(InPosition)
library(PTCA4CATA)
library(purrr)
library(tidyverse)
library(readxl)
library(stringr)
library(stringi)
library(wesanderson)
library(kableExtra)
library(ggplotify)
library(gridExtra)
library(grid)
library(abind)
powerpointFilename <- 'MusicalDescriptorsFigures.pptx'
path2pptx    <- '../Analysis/'
name4Graphs  <- paste0(path2pptx,powerpointFilename)
title4Graphs <- 'Musical Descriptors '
path2Data <- './Analysis/'
dataFilename1 <- 'MusDesc_US_data.csv'
path2file1 <- paste0(path2Data,dataFilename1)
# sheet2Read <- 'Data' Not necessary for this analysis,
# because the csv only has one sheet
fresh <- read.csv(path2file1)
dataFilename2 <- 'DescMusFeb4.csv'
path2file2 <- paste0(path2Data,dataFilename2) #this CSV is in the same fold
frdata <- read.csv(path2file2)
# remove the first two columns, which are qualtrics specific data
fresh <- fresh[-c(1,2),]
# remove all rows that were not completed.
fresh <- fresh[-c(which(fresh$Progress %s!==% "100")),]
#Select all columns that are adjective data
adjcols <- dplyr::select(fresh,contains("Excerpt"))
adjcolsfr <- dplyr::select(frdata,contains("Excerpt"))
# Dropping the qualtrics embedded rows and the first few participants, who were pilot participants
adjcols <- adjcols[-c(1:5), ]
rownames(adjcols) <- c(1:dim(adjcols)[[1]])
rownames(adjcolsfr) <- c((dim(adjcols)[[1]]+1):(dim(adjcols)[[1]]+dim(adjcolsfr)[[1]]))
#Select all columns that are participant data. We'll need this later
partcols <- fresh[ ,118:length(fresh)-1]
partcolsfr <- select(frdata, !contains("Excerpt"))
#Rename columns to something legible
colnames(partcolsfr) <- colnames(partcols) <- c("age", "gender", "nationality", "job", "job_writein", "tr_yrs", "tr_type",
"inst", "inf", "inf_inst", "inf_yrs", "cho", "cho_yrs",
"other_perf", "other_type", "other_yrs", "teach", "teach_yrs")
#Drop unusable rows and rename 1:end
partcols <- partcols[-c(1:5),]
rownames(partcols) <- rownames(adjcols)
rownames(partcolsfr) <- rownames(adjcolsfr)
translationFile <- 'translations.xlsx'
path2file3 <- paste0(path2Data, translationFile)
thetranslations <- data.frame(read_xlsx(path2file3, col_names = F))
frenchadjs <- thetranslations[,2]
englishadjs <- thetranslations[,1]
for(i in 1:length(frenchadjs)){
adjcolsfr <- map(adjcolsfr, ~gsub(coll(frenchadjs[i]), x = .,
replacement = englishadjs[i]))
}
adjcolsfr <- do.call(cbind, adjcolsfr) %>% as.data.frame(.)
rownames(adjcolsfr) <- rownames(partcolsfr)
#adjcolsfr$Excerpt.16 <- paste(adjcolsfr$Excerpt.16, adjcolsfr$Excerpt.16.1, sep = ",")
#adjcolsfr$Excerpt.18 <- paste(adjcolsfr$Excerpt.17, adjcolsfr$Excerpt.18, sep = ",")
#adjcolsfr$Excerpt.17[c(1:length(adjcolsfr$Excerpt17))] <- ""
#adjcolsfr <- adjcolsfr[,-c(16,17,18)]
adjcolsfr <- adjcolsfr[,-c(17,18)]
adjcols <- adjcols[,-c(17)]
partcols$nationality[grep("",x = partcols$nationality, ignore.case = T)]
print(partialfsmap.t)
rm(list = ls())
load("adj.catadata.list.RData")
load("excerptsdesign.RData")
load("adjdesign.RData")
load("adjectivecolors.RData")
partcols <- adj.catadata.list$partcols
adjbrick <- adj.catadata.list$adjbrick
adj.contingency <- adj.catadata.list$adjcontingency
adjcols <- adj.catadata.list$adjcols
listofwords <- adj.catadata.list$listofwords
nat.factor <- partcols$nationality
col4nat <- nat.factor
nat.factor <- as.factor(nat.factor)
#cols$n.oc[nat.factor == "AM"] <- "#FF0000"
#cols$n.oc[nat.factor == "FR"] <- "#046C9A"
#cols$n.gc[1] <- "#FF0000"
#cols$n.gc[2] <- "#046C9A"
adjsym.cares <- epCA(adj.contingency,
symmetric = TRUE)
adjrenorm <- CARenormalization(adjsym.cares$ExPosition.Data$fi,
delta = adjsym.cares$ExPosition.Data$pdq$Dv,
singularValues = T,
masses = adjsym.cares$ExPosition.Data$M
)
FIsym.adj <- adjsym.cares$ExPosition.Data$fi
FIasym.adj <- adjrenorm$G_A
FJs.adj <- adjsym.cares$ExPosition.Data$fj
CAEigs.adj <- adjsym.cares$ExPosition.Data$eigs
# Bootstrapping
bootCA.adj <- Boot4PTCA(ZeDataCube = adjbrick,
fi = FIsym.adj,
fj = FJs.adj,
eigs = CAEigs.adj,
nf2keep = 3,
nBootIter = 1000)
# Compute Bootstrapped ratios
bootRatadj.I <- PTCA4CATA::boot.ratio.test(bootCA.adj$RowsBoot,
critical.value = 2)
bootRatadj.J <- PTCA4CATA::boot.ratio.test(bootCA.adj$ColumnsBoot,
critical.value = 2)
# Probabilities
probBRadj.I  <- bootRatadj.I$prob.boot.ratios
probBRadj.J  <- bootRatadj.J$prob.boot.ratios
# Permutation tests
#adjca.inf <- perm4PTCA(aCube = adjbrick,
#                       nIter = 1000,
#                       permType = 'byRows' ,
#                       Malinvaud = TRUE)
#Ind.Permu.adj    <- adjca.inf$permInertia
#InertiaFixed.adj <- adjca.inf$fixedInertia
#prob.cpt.lst.adj <- adjca.inf$MalinvaudQ['p-perm',]
# Get the p values for the components
#prob.cpt.adj <- (unlist(prob.cpt.lst.adj[2:length(prob.cpt.lst.adj)]))
#prob.cpt.adj[is.na(prob.cpt.adj)] <- 1
Cmat.adj <- createSymDist4PTCA(adjbrick)$CrossProduct
eigenCmat.adj <- eigen(Cmat.adj, symmetric = TRUE)
eig4Cmat.adj <-  eigenCmat.adj$values
tau4Cmat.adj <- round( (100*eig4Cmat.adj) / sum(eig4Cmat.adj))
nk       <- 3
F4Cmat.adj   <- eigenCmat.adj$vectors[,1:nk] %*% diag(eig4Cmat.adj[1:nk]^(1/2))
rownames(F4Cmat.adj) <- rownames(Cmat.adj)
ScreeInf <- PlotScree(ev = eig4Cmat.adj,
max.ev = NULL, alpha = 0.05,
col.ns = "#006D2C", col.sig = "#54278F",
title = "Participants Distance Analysis, Adjectives Survey: \nExplained Variance per Dimension",
plotKaiser = T)
a000.adj.screeRV <-  recordPlot()
Shortnames4Participants <-  dimnames(adjbrick[[3]])
F4Plot <- F4Cmat.adj
rownames(F4Plot) <- Shortnames4Participants
# Make labels
labels4RV <- createxyLabels.gen(1,2,lambda = eig4Cmat.adj, tau = tau4Cmat.adj)
#Here we calculate the means for the factor groupings, and then bootstrap them:
n.adjmeans <- getMeans(F4Plot, nat.factor)
BootCadj.N <- PTCA4CATA::Boot4Mean(F4Cmat.adj, design = nat.factor,
niter = 1000,
suppressProgressBar = TRUE)
dimnames(BootCadj.N$BootCube)[[2]] <- paste0('Dimension ',
1:dim(BootCadj.N$BootCube)[[2]])
# Create ellipses for the map
n.elliadj <- MakeCIEllipses(BootCadj.N$BootCube[,1:2,],
names.of.factors = c("Dimension 1", "Dimension 2"),
col = cols$n.gc)
#Base map
BaseMap.Participants <- createFactorMap(X = F4Plot ,
axis1 = 1, axis2 = 2,
display.points = TRUE,
col.points = cols$n.oc,
pch = 19, cex = 2.5,
display.labels = TRUE,
col.labels = cols$n.oc,
text.cex = 4, font.face = "bold",
font.family = "sans",
col.axes = "darkorchid",
alpha.points = .25,
alpha.axes = 0.2,
width.axes = 1.1,
col.background = adjustcolor("lavender",
alpha.f = 0.2),
force = 1, segment.size = 3)
#Nationality map
title4RV <- "RV Analysis of Participants \nIncluding Group Means and Confidence Intervals"
n.rv.means <- createFactorMap(n.adjmeans,
axis1 = 1, axis2 = 2,
constraints = BaseMap.Participants$constraints,
col.points =  cols$n.gc,
alpha.points = 1, # no transparency
alpha.labels = 1,
display.points = TRUE,
pch = 17, cex = 5,
display.labels = TRUE,
#                              title = title4RV,
col.labels = cols$n.gc,
text.cex = 6,font.face = "bold",
font.family = "sans", col.axes = "darkorchid",
alpha.axes = 0.2, width.axes = 1.1,
col.background = adjustcolor("lavender", alpha.f = 0.2),
force = 1, segment.size = 0)
a.03adj.map4part <- BaseMap.Participants$zeMap_background +
n.rv.means$zeMap_text + n.rv.means$zeMap_dots +
BaseMap.Participants$zeMap_dots + n.elliadj + labels4RV
print(a.03adj.map4part)
adj.tau <- adjsym.cares$ExPosition.Data$t
adj.scree <- PlotScree(adjsym.cares$ExPosition.Data$eigs,
#p.ev = adjca.inf$pEigenvalues,
plotKaiser = T, color4Kaiser = "red")
mus.00.scree <- recordPlot()
rownames(FIsym.adj) <- c(1:16,18:30)
axisone <- 1
axistwo <- 2
exmap <- createFactorMapIJ(FIsym.adj,
FJs.adj,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 3.5, text.cex.j = 3.5,
font.face.j = 'italic',
)
vc.labels <- createxyLabels(resCA = adjsym.cares)
mus.adj.fi <- exmap$baseMap + #zePoly.J +
exmap$I_points +
exmap$I_labels +
#  exmap$J_points +
#   exmap$J_labels +
vc.labels + ggtitle('Excerpts')
mus.adj.fj <- exmap$baseMap + #zePoly.J +
#  exmap$I_points +
#   exmap$I_labels +
exmap$J_points +
exmap$J_labels +
vc.labels + ggtitle('Adjectives')
#grid.arrange(
#    as.grob(mus.adj.fi),as.grob(mus.adj.fj),
#   as.grob(mus.adj.amj),as.grob(mus.adj.frj),
#    ncol = 2,nrow = 1# ,top = textGrob("Factor Plots for the Adjectives Survey", gp = gpar(fontsize = 22, font = 3))
# )
signed.ctrI.adj <- adjsym.cares$ExPosition.Data$ci * sign(FIsym.adj)
signed.ctrJ.adj <- adjsym.cares$ExPosition.Data$cj * sign(FJs.adj)
CIlist <- vector(mode = "list", length = 2)
CJlist <- vector(mode = "list", length= 2)
names(CIlist) <- c("Dim1", "Dim2")
names(CJlist) <- c("Dim1", "Dim2")
for (i in 1:3){
CIlist[[i]] <- signed.ctrI.adj[which(abs(signed.ctrI.adj[,i]) > 1/nrow(signed.ctrI.adj)),i]
CJlist[[i]] <- signed.ctrJ.adj[which(abs(signed.ctrJ.adj[,i]) > 1/nrow(signed.ctrJ.adj)),i]
}
# plot contributions of rows for component 1
ctradjI.1 <- PrettyBarPlot2(CIlist[[1]],
threshold = 1 / NROW(signed.ctrI.adj),
font.size = 3,
color4bar = cols$ex.oc[which(abs(signed.ctrI.adj[,1]) > 1/nrow(signed.ctrI.adj))], # we need hex code
ylab = 'Contributions',
#sortValues = TRUE,
ylim = c(1.2*min(CIlist[[1]]), 1.2*max(CIlist[[1]]))
) + ggtitle("Component 1", subtitle = 'Excerpts')
# plot contributions of columns for component 1
ctradjJ.1 <- PrettyBarPlot2(CJlist$Dim1,
threshold = 1 / NROW(signed.ctrJ.adj),
font.size = 3,
color4bar = cols$adj.oc[which(abs(signed.ctrJ.adj[,1]) > 1/nrow(signed.ctrJ.adj))], # we need hex code
ylab = 'Contributions',
# sortValues = TRUE,
ylim = c(1.2*min(CJlist[[1]]), 1.2*max(CJlist[[1]]))
) + ggtitle("", subtitle = 'Adjectives')
# plot contributions of rows for component 2
ctradjI.2 <- PrettyBarPlot2(CIlist[[2]],
threshold = 1 / NROW(signed.ctrI.adj),
font.size = 3,
color4bar = cols$ex.oc[which(abs(signed.ctrI.adj[,2]) > 1/nrow(signed.ctrI.adj))], # we need hex code
ylab = 'Contributions',
# sortValues = TRUE,
ylim = c(1.2*min(signed.ctrI.adj[,2]), 1.2*max(signed.ctrI.adj[,2]))
) + ggtitle("Component 2", subtitle = 'Excerpts')
# plot contributions of columns for component 2
ctradjJ.2 <- PrettyBarPlot2(CJlist$Dim2,
threshold = 1 / NROW(signed.ctrJ.adj),
font.size = 3,
color4bar = cols$adj.oc[which(abs(signed.ctrJ.adj[,2]) > 1/nrow(signed.ctrJ.adj))], # we need hex code
ylab = 'Contributions',
# sortValues = TRUE,
ylim = c(1.2*min(signed.ctrJ.adj[,2]), 1.2*max(signed.ctrJ.adj[,2]))
) + ggtitle("", subtitle = 'Adjectives')
#grid.arrange(
#    as.grob(ctradjI.1),as.grob(ctradjJ.1),
#    as.grob(ctradjI.2),as.grob(ctradjJ.2),
#    ncol = 2,nrow = 2#, top = textGrob("Contributions, Adjectives Survey", gp = gpar(fontsize = 18, font = 3))
#  )
#Ctradj.IJ <- recordPlot()
#yellow is 1, blue is 2, green is 3, red is 4.
suppressMessages(library(MExPosition))
adjbrick.AM <- adjbrick[,,1:length(which(adj.catadata.list$partcols$nationality == "US"))]
adj.cont.AM <- apply(adjbrick.AM, c(1,2), sum)
adjbrick.FR <- adjbrick[,,(length(which(adj.catadata.list$partcols$nationality == "US"))+1):dim(adjbrick)[[3]]]
adj.cont.FR <- apply(adjbrick.FR, c(1,2), sum)
adj4MFA <- abind(adj.cont.FR, adj.cont.AM, along = 2)
frvec <- t(as.data.frame(rep("France", length.out = dim(adj.cont.FR)[2])))
amvec <- t(as.data.frame(rep("US", length.out = dim(adj.cont.AM)[2])))
colnames(frvec) <- colnames(amvec) <- colnames(adj.cont.FR)
rownames(frvec) <- rownames(amvec) <- "group"
mfagroups <- abind(frvec, amvec, along = 2)
mfares <- mpMFA(adj4MFA, mfagroups)
renameCols <- function(x){
colnames(x) <- paste("Dimension", 1:ncol(x))
x
}
RVmat <- mfares$mexPosition.Data$InnerProduct$RVMatrix
#corrplot(RVmat, method = "color", addCoefasPercent = TRUE)
Eig4scree <- mfares$mexPosition.Data$Table$eigs
#mfascree <- PlotScree(Eig4scree, plotKaiser = TRUE)
fi4pfs <- mfares$mexPosition.Data$Table$fi
fi4pfs[,2] <- fi4pfs[,2]*-1
rownames(fi4pfs) <- c(1:16,18:30)
MFA_FMap <- createFactorMap(
fi4pfs,
col.points = cols$ex.oc,
col.labels = cols$ex.oc,
alpha.points = .6,
pch = 17,
cex = 5, text.cex = 5,
display.labels = TRUE,
constraints = minmaxHelper4Partial(FactorScores = mfares$mexPosition.Data$Table$fi,
partialFactorScores = 1.25*mfares$mexPosition.Data$Table$partial.fi.array)
)
label4Map <- createxyLabels.gen(1,2,
lambda = mfares$mexPosition.Data$Table$eigs,
tau = mfares$mexPosition.Data$Table$t,
axisName = "Dimension ")
fi4pfs <- renameCols(fi4pfs)
pfi4pfs <- mfares$mexPosition.Data$Table$partial.fi.array
pfi4pfs[,2,c(1:2)] <- pfi4pfs[,2,c(1:2)]*-1
pfi4pfs <- renameCols(pfi4pfs)
rownames(pfi4pfs) <- c(1:16,18:30)
dimnames(pfi4pfs)[[3]] <- c("France", "US")
map4PFS <- createPartialFactorScoresMap(
factorScores = fi4pfs,
partialFactorScores = pfi4pfs,
axis1 = 1, axis2 = 2,
colors4Items = cols$ex.oc,
names4Partial = c("FR", "US"),
font.labels = 'bold',
)
partialfsmap <- MFA_FMap$zeMap +
label4Map +
map4PFS$linesColByItems +
map4PFS$pointsColByItems +
map4PFS$labelsColByItems +
ggtitle("Partial Factor Scores for Excerpts by Nationality")
adj4MFA.T <- abind(t(adj.cont.FR), t(adj.cont.AM), along = 2)
natvec <- rep(c("France", "US"), times = dim(adj4MFA.T)[2]/2)
natvec <- data.frame(natvec[order(natvec, decreasing = T)]) %>% t(.)
colnames(natvec) <- colnames(adj4MFA.T)
rownames(natvec) <- "group"
mfares.t <- mpMFA(adj4MFA.T, natvec)
RVmat.t <- mfares.t$mexPosition.Data$InnerProduct$RVMatrix
#corrplot(RVmat, method = "color", addCoefasPercent = TRUE)
Eig4scree <- mfares$mexPosition.Data$Table$eigs
#mfascree <- PlotScree(Eig4scree, plotKaiser = TRUE)
MFA_FMap.t <- createFactorMap(
mfares.t$mexPosition.Data$Table$fi,
col.points = cols$adj.oc,
col.labels = cols$adj.oc,
alpha.points = .6,
pch = 17,
cex = 5,
display.labels = TRUE,
constraints = minmaxHelper4Partial(FactorScores = mfares.t$mexPosition.Data$Table$fi,
partialFactorScores = mfares.t$mexPosition.Data$Table$partial.fi.array)
)
label4Map.t <- createxyLabels.gen(1,2,
lambda = mfares.t$mexPosition.Data$Table$eigs,
tau = mfares.t$mexPosition.Data$Table$t,
axisName = "Dimension ")
fi4pfs.t <- mfares.t$mexPosition.Data$Table$fi
fi4pfs.t <- renameCols(fi4pfs.t)
pfi4pfs.t <- mfares.t$mexPosition.Data$Table$partial.fi.array
pfi4pfs.t <- renameCols(pfi4pfs.t)
rownames(pfi4pfs.t) <- colnames(adj.contingency)
dimnames(pfi4pfs.t)[[3]] <- c("France", "US")
map4PFS.t <- createPartialFactorScoresMap(
factorScores = fi4pfs.t,
partialFactorScores = pfi4pfs.t,
axis1 = 1, axis2 = 2,
colors4Items = cols$adj.oc,
names4Partial = c("FR", "US"),
font.labels = 'bold',
# alpha.lines = .75, size.lines = 3
)
partialfsmap.t <- MFA_FMap.t$zeMap +
label4Map.t +
map4PFS.t$linesColByItems +
map4PFS.t$pointsColByItems +
map4PFS.t$labelsColByItems +
ggtitle("Partial Factor Scores for Adjectives, by Nationality")
print(partialfsmap.t)
mfasbs_t <- recordPlot()
print(partialfsmap.t)
partialfsmap.t <- MFA_FMap.t$zeMap +
label4Map.t +
map4PFS.t$linesColByItems +
map4PFS.t$pointsColByItems +
map4PFS.t$labelsColByItems +
ggtitle("Partial Factor Scores for Adjectives, by Nationality")
print(partialfsmap.t)
mfasbs_t <- recordPlot()
