niter = 100,
suppressProgressBar = TRUE)
dimnames(BootCube.N$BootCube)[[2]] <- paste0('Dimension ',
1: dim(BootCube.N$BootCube)[[2]])
BootCube.G <- PTCA4CATA::Boot4Mean(F4Cmat.Q, design = bygender,
niter = 100,
suppressProgressBar = TRUE)
dimnames(BootCube.G$BootCube)[[2]] <- paste0('Dimension ',
1: dim(BootCube.G$BootCube)[[2]])
n.ellipse <- MakeCIEllipses(BootCube.N$BootCube[,1:2,],
names.of.factors = c("Dimension 1","Dimension 2"),
col = c(col4AM, col4FR))
g.ellipse <- MakeCIEllipses(BootCube.G$BootCube[,1:2,],
names.of.factors = c("Dimension 1","Dimension 2"),
col = c(col4M, col4F))
n.symdist.means <- createFactorMap(nationmeans,
axis1 = 1, axis2 = 2,
title = "Colored according to Nationality",
col.points =  c(col4AM, col4FR),
alpha.points = 1, # no transparency
constraints = BaseMap.Nationality$constraints,
display.points = TRUE,
pch = 19, cex = 5,
display.labels = TRUE,
col.labels = c(col4AM, col4FR),
text.cex = 4,font.face = "bold",
font.family = "sans", col.axes = "darkorchid",
alpha.axes = 0.2, width.axes = 1.1,
col.background = adjustcolor("lavender", alpha.f = 0.2),
force = 1, segment.size = 0)
g.symdist.means <- createFactorMap(gendermeans,
axis1 = 1, axis2 = 2,
title = "Colored according to Gender",
col.points =  c(col4M, col4F),
alpha.points = 1, # no transparency
constraints = BaseMap.Gender$constraints,
display.points = TRUE,
pch = 19, cex = 5,
display.labels = TRUE,
col.labels = c(col4M, col4F),
text.cex = 4,font.face = "bold",
font.family = "sans", col.axes = "darkorchid",
alpha.axes = 0.2, width.axes = 1.1,
col.background = adjustcolor("lavender", alpha.f = 0.2),
force = 1, segment.size = 0)
a.01.map4part <- BaseMap.Nationality$zeMap_background + labels4RV.Q +
n.symdist.means$zeMap_dots + n.ellipse +
BaseMap.Nationality$zeMap_dots + n.symdist.means$zeMap_text
a.02.map4part <- BaseMap.Gender$zeMap_background + labels4RV.Q +
g.symdist.means$zeMap_dots + g.ellipse +
BaseMap.Gender$zeMap_dots + g.symdist.means$zeMap_text
grid.arrange(as.grob(a.01.map4part),
as.grob(a.02.map4part), ncol = 2,
top = textGrob("Factor Scores for Participants in the Qualities Survey",
gp = gpar(fontsize = 18, font = 3)))
# Seed for random number generation
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, fig.align = "center",cache.extra = knitr::rand_seed)
set.seed(42)
papaja::r_refs("r-references.bib")
library("papaja")
suppressMessages(library(ExPosition))
suppressMessages(library(InPosition))
suppressMessages(library(MExPosition))
library(PTCA4CATA)
library(purrr)
library(plyr)
library(tidyverse)
library(readxl)
library(stringr)
library(stringi)
library(rlist)
library(wesanderson)
#library(kableExtra)
library(ggplotify)
library(gridExtra)
library(grid)
library(abind)
powerpointFilename <- 'Music-Descriptor-Space.pptx'
path2pptx    <- './Analysis/'
name4Graphs  <- paste0(path2pptx,powerpointFilename)
title4Graphs <- 'Music Descriptor Space '
load("catadatamusdim.RData")
musdimdata <- catadata.list$contingency
numberofdims <- catadata.list$numberofdims
thebrick <- catadata.list$thebrick
rows2drop <- c(6,14)
musdimdata.no6 <- musdimdata[-rows2drop,]
thebrick.no6 <- thebrick[-rows2drop,,]
# reorder some of the columns in the french experts dataset,
# taking only the ones we want to analyse for now
fr.ex.data <- catadata.list$french.expert.data[c(1:3,6,7,9:12),c(1,4,5,6,7)]
colnames(fr.ex.data) <- c("age", "gen", "nat", "tr_yrs", "tr_type")
fr.ex.data$gen[which(fr.ex.data$gen == "Homme")] <- "M"
fr.ex.data$gen[which(fr.ex.data$gen == "Femme")] <- "F"
fr.ex.data$nat <- "FR"
fr.ex.data$tr_type[which(fr.ex.data$tr_type == "Instrumentale")] <- "Inst"
fr.ex.data$tr_type[which(fr.ex.data$tr_type == "Vocale")] <- "Voc"
am.ex.data <- catadata.list$expert.data[,c(1:3,6,7)]
colnames(am.ex.data) <- colnames(fr.ex.data)
am.ex.data$nat <- "AM"
am.ex.data$gen[which(am.ex.data$gen == "Male")] <- "M"
am.ex.data$gen[which(am.ex.data$gen == "Female")] <- "F"
am.ex.data$tr_type[which(am.ex.data$tr_type == "Instrumental")] <- "Inst"
am.ex.data$tr_type[which(am.ex.data$tr_type == "Vocal")] <- "Voc"
# Bind it all together
ex.data <- rbind(am.ex.data, fr.ex.data)
bygender <- as.factor(ex.data$gen)
bynationality <- as.factor(ex.data$nat)
dimcares.inf <- epCA.inference.battery(musdimdata.no6,
masses= NULL, weights= NULL,
hellinger = FALSE, symmetric = TRUE,
graphs =FALSE, test.iters = 1000)
# Factor Scores
FIsym  <- dimcares.inf$Fixed.Data$ExPosition.Data$fi
#FIasym <- RenormFi$G_A
FJs    <- dimcares.inf$Fixed.Data$ExPosition.Data$fj
CA.Q.Eigs <- dimcares.inf$Fixed.Data$ExPosition.Data$eigs
CA.Q.pEig <- dimcares.inf$Inference.Data$components$eigs.perm
# Participant colors:
col4M <- wes_palettes$Rushmore1[3]
col4F <- wes_palettes$Rushmore1[5]
col4FR <- wes_palettes$Darjeeling1[1]
col4AM <- wes_palettes$Darjeeling2[2]
#
col4byG <- as.character(bygender)
col4byG[col4byG == "F"] <- col4F
col4byG[col4byG == "M"] <- col4M
col4byN <- as.character(bynationality)
col4byN[col4byN == "FR"] <- col4FR
col4byN[col4byN == "AM"] <- col4AM
# To account for the fact that we removed some rows above:
numberofdims[c(1,7,8,9,10)] <- c(8,7,3,4,6)
numberofdims <- numberofdims[-11]
col4cols <- wes_palette("FantasticFox1",
length(numberofdims), type = "continuous")
col4cols <- rep(col4cols, numberofdims)
bootCA <- Boot4PTCA(ZeDataCube = thebrick.no6,
fi = FIsym,
fj = FJs,
eigs = CA.Q.Eigs,
nf2keep = 3,
nBootIter = 500)
# Compute Bootstrapped ratios
bootRatios.I <- PTCA4CATA::boot.ratio.test(bootCA$RowsBoot,
critical.value = 2)
bootRatios.J <- PTCA4CATA::boot.ratio.test(bootCA$ColumnsBoot,
critical.value = 2)
# Probabilities
probBR.I  <- bootRatios.I$prob.boot.ratios
probBR.J  <- bootRatios.J$prob.boot.ratios
# We have a problem here because most matrices
#  have lines with zeros. A symmetric difference matrix
#  would do better than an RV or a
#  chi2 distance so we use createSymDist4PTCA
Cmat.Q <- createSymDist4PTCA(thebrick)$CrossProduct
# Calculate the eigenvalues and the percentage of variance extracted (tau)
eigenCmat.Q <- eigen(Cmat.Q, symmetric = TRUE)
eig4Cmat.Q <-  eigenCmat.Q$values
tau4Cmat.Q <- round( (100*eig4Cmat.Q) / sum(eig4Cmat.Q))
# Calculate factor scores for the first three dimensions
nk       <- 3
F4Cmat.Q   <- eigenCmat.Q$vectors[,1:nk] %*% diag(eig4Cmat.Q[1:nk]^(1/2))
# Prep for plotting
Shortnames4Participants.Q <-  dimnames(thebrick[[3]])
rownames(F4Cmat.Q) <- Shortnames4Participants.Q
# Make labels
labels4RV.Q <- createxyLabels.gen(1,2,lambda = eig4Cmat.Q, tau = tau4Cmat.Q)
# Scree plot with significance
ScreeInf <- PlotScree(ev = eig4Cmat.Q,
max.ev = NULL, alpha = 0.05,
col.ns = "#006D2C", plotKaiser = TRUE,
title = "Participants Distance Analysis, Musical Qualities Survey: \nExplained Variance per Dimension")
a000.00.screeRV <-  recordPlot()
# Scree plot with significance
ScreeInf <- PlotScree(ev = eig4Cmat.Q,
max.ev = NULL, alpha = 0.05,
col.ns = "#006D2C", plotKaiser = TRUE,
title = "Participants Distance Analysis, Musical Qualities Survey: \nExplained Variance per Dimension")
?PTCA4CATA
test <- perm4PTCA(thebrick.no6, compact = T, permType = "byMat")
test
test$pEigenvalues
length(test$pEigenvalues)
install.packages("seriation")
install.packages("sna")
?sna
library(sna)
?sna
permeigs4Q <- vector(mode = "list", length = 1000)
permeigs4Q[[1]]
permeigs4Q[[2]]
permeigs4Q[1]
permeigs4Q[2]
permeigs4Q[i] <- eigen(pmat)
for (i in 1:1000){
pmat <- rmperm(Cmat.Q)
permeigs4Q[i] <- eigen(pmat)
}
permeigs4Q[1]
permeigs4Q <- matrix(nrow = 1000, ncol = 27)
for (i in 1:1000){
pmat <- rmperm(Cmat.Q)
permeigs4Q[i,] <- eigen(pmat)
}
test <- rmperm(Cmat.Q)
eigen(test)
permeigs4Q <- matrix(nrow = 27, ncol = 1000)
permeigs4Q <- matrix(nrow = 27, ncol = 1000)
for (i in 1:1000){
pmat <- rmperm(Cmat.Q)
permeigs4Q[i,] <- eigen(pmat)
}
for (i in 1:1000){
pmat <- rmperm(Cmat.Q)
permeigs4Q[i,] <- t(eigen(pmat))
}
dim(test)
dim(eigen(Cmat.Q))
length(eigen(Cmat.Q))
dim(test)
eigen(Cmat.Q)
for (i in 1:1000){
pmat <- rmperm(Cmat.Q)
permeigs4Q[i,] <- t(eigen(pmat)$values)
}
eigen(test)$values
dim(eigen(test)$values)
length(eigen(test)$values)
dim(t(eigen(test)$values))
for (i in 1:1000){
pmat <- rmperm(Cmat.Q)
permeigs4Q[i,] <- eigen(pmat)$values
}
dim(permeigs4Q)
permeigs4Q <- matrix(nrow = 1000, ncol = 27)
dim(permeigs4Q)
for (i in 1:1000){
pmat <- rmperm(Cmat.Q)
permeigs4Q[i,] <- eigen(pmat)$values
}
max(permeigs4Q[,1])
eig4Cmat.Q[1]
permeigs4Q[,1:50]
dim(permeigs4Q)
permeigs4Q[1:10,1:5]
Cmat.Q
rmperm(Cmat.Q)
test <- rmperm(Cmat.Q)
test - Cmat.Q
eigen(test)$values
eig4Cmat.Q
sample(Cmat.Q)
test <- matrix(nrow = 27, ncol = 27)
test <- sample(Cmat.Q)
test
test1 <- matrix(test, nrow = 27, ncol = 27)
test1
permeigs4Q <- matrix(nrow = 1000, ncol = 27)
for (i in 1:1000){
pmat <- matrix(rmperm(Cmat.Q), nrow = 27, ncol = 27)
permeigs4Q[i,] <- eigen(pmat)$values
}
permeigs4Q[1,]
permeigs4Q[,1]
?createSymDist4PTCA
pmat
permeigs4Q <- matrix(nrow = 1000, ncol = 27)
for (i in 1:1000){
pmat <- matrix(sample(Cmat.Q), nrow = 27, ncol = 27)
permeigs4Q[i,] <- eigen(pmat)$values
}
permeigs4Q[1:20,1]
max(permeigs4Q[,1])
sz <- nrow(Cmat.Q)
permeigs4Q <- matrix(nrow = 1000, ncol = 27)
sz <- nrow(Cmat.Q)
for (i in 1:1000){
pmat <- Cmat.Q[sample(1:sz, sz, replace = FALSE),]
pmat <- pmat[ , sample(1:sz, sz, replace = FALSE)]
permeigs4Q[i,] <- eigen(pmat)$values
}
permeigs4Q[1:20,1]
load("adj.catadata.list.RData")
load("excerptsdesign.RData")
load("adjdesign.RData")
load("adjectivecolors.RData")
as.factor(adj.catadata.list$partcols$nationality)
# Scree plot with significance
ScreeInf <- PlotScree(ev = eig4Cmat.Q,
max.ev = NULL, alpha = 0.05,
col.ns = "#006D2C", plotKaiser = TRUE,
title = "Participants Distance Analysis, Musical Qualities Survey: \nExplained Variance per Dimension",
p.ev = test)
a000.00.screeRV <-  recordPlot()
# Scree plot with significance
ScreeInf <- PlotScree(ev = eig4Cmat.Q,
max.ev = NULL, alpha = 0.05,
col.ns = "#006D2C", plotKaiser = TRUE,
title = "Participants Distance Analysis, Musical Qualities Survey: \nExplained Variance per Dimension",
p.ev = test)
# Scree plot with significance
ScreeInf <- PlotScree(ev = eig4Cmat.Q,
max.ev = NULL, alpha = 0.05,
col.ns = "#006D2C", plotKaiser = TRUE,
title = "Participants Distance Analysis, Musical Qualities Survey: \nExplained Variance per Dimension",
)
`r round(eig4Cmat.Q[1], 3)`
round(eig4Cmat.Q[1], 3)
round(eig4Cmat.Q[2], 3)
round(sum(tau4Cmat.Q[1:2]), 2)
round(sum(tau4Cmat.Q[1:2]), 3)
round(sum(tau4Cmat.Q[1:2]), 4)
sum(tau4Cmat.Q[1:2])
tau4Cmat.Q
# Seed for random number generation
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, fig.align = "center",cache.extra = knitr::rand_seed)
set.seed(42)
papaja::r_refs("r-references.bib")
library("papaja")
suppressMessages(library(ExPosition))
suppressMessages(library(InPosition))
suppressMessages(library(MExPosition))
library(PTCA4CATA)
library(purrr)
library(plyr)
library(tidyverse)
library(readxl)
library(stringr)
library(stringi)
library(rlist)
library(wesanderson)
#library(kableExtra)
library(ggplotify)
library(gridExtra)
library(grid)
library(abind)
powerpointFilename <- 'Music-Descriptor-Space.pptx'
path2pptx    <- './Analysis/'
name4Graphs  <- paste0(path2pptx,powerpointFilename)
title4Graphs <- 'Music Descriptor Space '
load("catadatamusdim.RData")
musdimdata <- catadata.list$contingency
numberofdims <- catadata.list$numberofdims
thebrick <- catadata.list$thebrick
rows2drop <- c(6,14)
musdimdata.no6 <- musdimdata[-rows2drop,]
thebrick.no6 <- thebrick[-rows2drop,,]
# reorder some of the columns in the french experts dataset,
# taking only the ones we want to analyse for now
fr.ex.data <- catadata.list$french.expert.data[c(1:3,6,7,9:12),c(1,4,5,6,7)]
colnames(fr.ex.data) <- c("age", "gen", "nat", "tr_yrs", "tr_type")
fr.ex.data$gen[which(fr.ex.data$gen == "Homme")] <- "M"
fr.ex.data$gen[which(fr.ex.data$gen == "Femme")] <- "F"
fr.ex.data$nat <- "FR"
fr.ex.data$tr_type[which(fr.ex.data$tr_type == "Instrumentale")] <- "Inst"
fr.ex.data$tr_type[which(fr.ex.data$tr_type == "Vocale")] <- "Voc"
am.ex.data <- catadata.list$expert.data[,c(1:3,6,7)]
colnames(am.ex.data) <- colnames(fr.ex.data)
am.ex.data$nat <- "AM"
am.ex.data$gen[which(am.ex.data$gen == "Male")] <- "M"
am.ex.data$gen[which(am.ex.data$gen == "Female")] <- "F"
am.ex.data$tr_type[which(am.ex.data$tr_type == "Instrumental")] <- "Inst"
am.ex.data$tr_type[which(am.ex.data$tr_type == "Vocal")] <- "Voc"
# Bind it all together
ex.data <- rbind(am.ex.data, fr.ex.data)
bygender <- as.factor(ex.data$gen)
bynationality <- as.factor(ex.data$nat)
dimcares.inf <- epCA.inference.battery(musdimdata.no6,
masses= NULL, weights= NULL,
hellinger = FALSE, symmetric = TRUE,
graphs =FALSE, test.iters = 1000)
# Factor Scores
FIsym  <- dimcares.inf$Fixed.Data$ExPosition.Data$fi
#FIasym <- RenormFi$G_A
FJs    <- dimcares.inf$Fixed.Data$ExPosition.Data$fj
CA.Q.Eigs <- dimcares.inf$Fixed.Data$ExPosition.Data$eigs
CA.Q.pEig <- dimcares.inf$Inference.Data$components$eigs.perm
# Participant colors:
col4M <- wes_palettes$Rushmore1[3]
col4F <- wes_palettes$Rushmore1[5]
col4FR <- wes_palettes$Darjeeling1[1]
col4AM <- wes_palettes$Darjeeling2[2]
#
col4byG <- as.character(bygender)
col4byG[col4byG == "F"] <- col4F
col4byG[col4byG == "M"] <- col4M
col4byN <- as.character(bynationality)
col4byN[col4byN == "FR"] <- col4FR
col4byN[col4byN == "AM"] <- col4AM
# To account for the fact that we removed some rows above:
numberofdims[c(1,7,8,9,10)] <- c(8,7,3,4,6)
numberofdims <- numberofdims[-11]
col4cols <- wes_palette("FantasticFox1",
length(numberofdims), type = "continuous")
col4cols <- rep(col4cols, numberofdims)
bootCA <- Boot4PTCA(ZeDataCube = thebrick.no6,
fi = FIsym,
fj = FJs,
eigs = CA.Q.Eigs,
nf2keep = 3,
nBootIter = 500)
# Compute Bootstrapped ratios
bootRatios.I <- PTCA4CATA::boot.ratio.test(bootCA$RowsBoot,
critical.value = 2)
bootRatios.J <- PTCA4CATA::boot.ratio.test(bootCA$ColumnsBoot,
critical.value = 2)
# Probabilities
probBR.I  <- bootRatios.I$prob.boot.ratios
probBR.J  <- bootRatios.J$prob.boot.ratios
# We have a problem here because most matrices
#  have lines with zeros. A symmetric difference matrix
#  would do better than an RV or a
#  chi2 distance so we use createSymDist4PTCA
Cmat.Q <- createSymDist4PTCA(thebrick)$CrossProduct
# Calculate the eigenvalues and the percentage of variance extracted (tau)
eigenCmat.Q <- eigen(Cmat.Q, symmetric = TRUE)
eig4Cmat.Q <-  eigenCmat.Q$values
tau4Cmat.Q <- round( (100*eig4Cmat.Q) / sum(eig4Cmat.Q))
# Calculate factor scores for the first three dimensions
nk       <- 3
F4Cmat.Q   <- eigenCmat.Q$vectors[,1:nk] %*% diag(eig4Cmat.Q[1:nk]^(1/2))
# Prep for plotting
Shortnames4Participants.Q <-  dimnames(thebrick[[3]])
rownames(F4Cmat.Q) <- Shortnames4Participants.Q
# Make labels
labels4RV.Q <- createxyLabels.gen(1,2,lambda = eig4Cmat.Q, tau = tau4Cmat.Q)
#pev4Q <- perm4PTCA(thebrick.no6, compact = T, permType = "byMat")
#permeigs4Q <- matrix(nrow = 1000, ncol = 27)
#sz <- nrow(Cmat.Q)
#for (i in 1:1000){
#
#  pmat <- Cmat.Q[sample(1:sz, sz, replace = FALSE),]
#  pmat <- pmat[ , sample(1:sz, sz, replace = FALSE)]
#  permeigs4Q[i,] <- eigen(pmat)$values
#}
# Scree plot with significance
ScreeInf <- PlotScree(ev = eig4Cmat.Q,
max.ev = NULL, alpha = 0.05,
col.ns = "#006D2C", plotKaiser = TRUE,
title = "Participants Distance Analysis, Musical Qualities Survey: \nExplained Variance per Dimension",
)
a000.00.screeRV <-  recordPlot()
dim1eigperc <- round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[1]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2)
dim2eigperc <- round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[2]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2)
dim3eigperc <- round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[3]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2)
dim4eigperc <- round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[4]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2)
sum(dim1eigperc, dim2eigperc, dim3eigperc dim3eigperc)
sum(dim1eigperc, dim2eigperc, dim3eigperc, dim4eigperc)
dimcares.inf$Fixed.Data$ExPosition.Data$eigs
sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)
load("excerptsdesign.RData")
col4exgrp <- excerptsdesign$ex.design$col4exgrp
ex.cols <- excerptsdesign$ex.design$ex.cols
signed.ctrI <- dimcares.inf$Fixed.Data$ExPosition.Data$ci * sign(FIsym)
signed.ctrJ <- dimcares.inf$Fixed.Data$ExPosition.Data$cj * sign(FJs)
CIlist.dim <- vector(mode = "list", length = 3)
CJlist.dim <- vector(mode = "list", length= 3)
names(CIlist.dim) <- c("Dim1", "Dim2", "Dim3")
names(CJlist.dim) <- c("Dim1", "Dim2", "Dim3")
for (i in 1:3){
CIlist.dim[[i]] <- signed.ctrI[which(abs(signed.ctrI[,i]) > 1/nrow(signed.ctrI)),i]
CJlist.dim[[i]] <- signed.ctrJ[which(abs(signed.ctrJ[,i]) > 1/nrow(signed.ctrJ)),i]
}
col4barsQ <- vector(mode = "list", length = 6)
names(col4barsQ) <- c("IDim1", "JDim1", "IDim2", "JDim2", "IDim3", "JDim3")
nrows <- nrow(signed.ctrI)
# plot contributions of rows for component 1
ctrI.1 <- PrettyBarPlot2(CIlist.dim$Dim1,
threshold = 1 / NROW(signed.ctrI),
font.size = 3,
color4bar = col4exgrp[which(abs(signed.ctrI[,1]) > 1/nrow(signed.ctrI))] , # we need hex code
ylab = 'Contributions', #sortValues = TRUE,
ylim = c(1.2*min(signed.ctrI[,1]), 1.2*max(signed.ctrI[,1]))
) + ggtitle("Component 1", subtitle = 'Rows')
# plot contributions of columns for component 1
ctrJ.1 <- PrettyBarPlot2(CJlist.dim$Dim1,
threshold = 1 / NROW(signed.ctrJ),
font.size = 3,
color4bar = col4cols[which(abs(signed.ctrJ[,1]) > 1/nrow(signed.ctrJ))], # we need hex code
ylab = 'Contributions',
ylim = c(1.2*min(signed.ctrJ[,1]), 1.2*max(signed.ctrJ[,1]))
) + ggtitle("", subtitle = 'Columns')
# plot contributions of rows for component 2
ctrI.2 <- PrettyBarPlot2(CIlist.dim$Dim2,
threshold = 1 / NROW(signed.ctrI),
font.size = 3,
color4bar = col4exgrp[which(abs(signed.ctrI[,2]) > 1/nrow(signed.ctrI))] , # we need hex code
ylab = 'Contributions',
ylim = c(1.2*min(signed.ctrI[,2]), 1.2*max(signed.ctrI[,2]))
) + ggtitle("Component 2", subtitle = 'Rows')
# plot contributions of columns for component 2
ctrJ.2 <- PrettyBarPlot2(CJlist.dim$Dim2,
threshold = 1 / NROW(signed.ctrJ),
font.size = 3,
color4bar = col4cols[which(abs(signed.ctrJ[,2]) > 1/nrow(signed.ctrJ))], # we need hex code
ylab = 'Contributions',
ylim = c(1.2*min(signed.ctrJ[,2]), 1.2*max(signed.ctrJ[,2]))
) + ggtitle("", subtitle = 'Columns')
grid.arrange(
as.grob(ctrI.1),as.grob(ctrJ.1),
as.grob(ctrI.2),as.grob(ctrJ.2),
ncol = 2,nrow = 2,
top = textGrob("Contributions, Qualities Survey", gp = gpar(fontsize = 18, font = 3))
)
Ctr.IJ <- recordPlot()
#1 - blue, 2 - red, 3 - green, 4 - yellow
# Scree plot with significance
ScreeInf <- PlotScree(ev = eig4Cmat.Q,
max.ev = NULL, alpha = 0.05,
col.ns = "#006D2C", plotKaiser = TRUE,
title = "Participants Distance Analysis, Musical Qualities Survey: \nExplained Variance per Dimension",
)
