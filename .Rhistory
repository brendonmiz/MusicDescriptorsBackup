#Select all columns that are participant data. We'll need this later
partcols <- fresh[ ,118:length(fresh)-1]
partcolsfr <- select(frdata, !contains("Excerpt"))
#Rename columns to something legible
colnames(partcols) <- c("age", "gender", "nationality", "job", "job_writein", "tr_yrs", "tr_type",
"inst", "inf", "inf_inst", "inf_yrs", "cho", "cho_yrs",
"other_perf", "other_type", "other_yrs", "teach", "teach_yrs")
colnames(partcolsfr) <- colnames(partcols)
#Drop unusable rows and rename 1:end
partcols <- partcols[-c(1:5),]
rownames(partcols) <- rownames(adjcols)
rownames(partcolsfr) <- rownames(adjcolsfr)
translationFile <- 'translations.xlsx'
path2file3 <- paste0(path2Data, translationFile)
thetranslations <- data.frame(read_xlsx(path2file3, col_names = F))
frenchadjs <- thetranslations[,2]
englishadjs <- thetranslations[,1]
for(i in 1:length(frenchadjs)){
adjcolsfr <- map(adjcolsfr, ~gsub(coll(frenchadjs[i]), x = .,
replacement = englishadjs[i]))
}
adjcolsfr <- do.call(cbind, adjcolsfr) %>% as.data.frame(.)
rownames(adjcolsfr) <- rownames(partcolsfr)
adjcolsfr$Excerpt.16 <- paste(adjcolsfr$Excerpt.16, adjcolsfr$Excerpt.16.1, sep = ",")
#adjcolsfr$Excerpt.18 <- paste(adjcolsfr$Excerpt.17, adjcolsfr$Excerpt.18, sep = ",")
#adjcolsfr$Excerpt.17[c(1:length(adjcolsfr$Excerpt17))] <- ""
#adjcolsfr <- adjcolsfr[,-c(16,17,18)]
adjcolsfr <- adjcolsfr[,-17]
#adjcols <- adjcols[,-c(16,17)]
partcols <- rbind(partcols, partcolsfr)
adjcols <- rbind(adjcols, adjcolsfr)
nationalities <- partcols$nationality
# for the vector on this next line, manually call "unique(nationalities)"
# and look through for which elements of that vector make sense here.
findtheamericans <- unique(nationalities)[c(2,3,4,5,6,7,9,10,11,16,17,19,21,22,
27,28,30,31,32,35,36,38,39,40,41,42,
46,47,49,52,54,55,58,59,60,63,64,67,
68)]
rows2use <- c(which(partcols$nationality %in% findtheamericans), which(partcols$nationality == "FR"))
adjcols <- adjcols[rows2use,]
partcols <- partcols[rows2use,]
partcols$nationality[partcols$nationality != "FR"] <- "AM"
dim(adjcols)
# Find maximum number of words per response
commacount <- unlist(adjcols) %>% str_count(",") %>% na.omit(.) %>% max()
# Separate words into separate columns
allwords <- as.data.frame(unlist(adjcols))
wordmat <- separate(allwords, 1:length(allwords), into = as.character(c(1:(commacount+1))), sep = ',')
# Get the list of adjectives
listofwords <- unlist(wordmat) %>% unique()
listofwords <- listofwords[order(listofwords)] %>% stri_remove_empty(na_empty = T) #to remove the empty response and NA
#listofwordsfr <- unlist(wordmatfr) %>% unique()
#listofwordsfr <- listofwordsfr[order(listofwordsfr)] %>% stri_remove_empty(na_empty = T) #to remove the empty response and
#Create a vector of participant names
vec <- c(paste0("part", 1:dim(adjcols)[[1]]))
vec <- as.list(vec)
#Initialize an array to store the participant contingency tables
thebigone <- array(0, dim=c(ncol(adjcols),length(listofwords),dim(adjcols)[[1]]), dimnames = list(colnames(adjcols), listofwords, vec))
# Count all adjectives in each
for (k in 1:dim(adjcols)[[1]]){
for (i in 1:ncol(adjcols)){
q <- str_match(string = adjcols[k,i], pattern = listofwords)
j <- which(!is.na(q))
thebigone[i,j,k] <- 1
}
}
dim(thebigone)
adj.cont.table <- apply(thebigone,c(1,2),sum)
adj.catadata.list <- list("adjbrick" = thebigone,
"adjcontingency" = adj.cont.table,
"partcols" = partcols,
"adjcols" = adjcols,
"listofwords" = listofwords
)
save(adj.catadata.list, file = "adj.catadata.list.RData")
rm(list = ls())
load("adj.catadata.list.RData")
load("excerptsdesign.RData")
load("adjdesign.RData")
load("adjectivecolors.RData")
partcols <- adj.catadata.list$partcols
adjbrick <- adj.catadata.list$adjbrick
adj.contingency <- adj.catadata.list$adjcontingency
adjcols <- adj.catadata.list$adjcols
listofwords <- adj.catadata.list$listofwords
nat.factor <- partcols$nationality
col4nat <- nat.factor
nat.factor <- as.factor(nat.factor)
cols$n.oc[nat.factor == "AM"] <- "#FF0000"
cols$n.oc[nat.factor == "FR"] <- "#046C9A"
cols$n.gc[1] <- "#FF0000"
cols$n.gc[2] <- "#046C9A"
length(nat.factor)
length(cols$n.oc)
rm(list = ls())
load("adj.catadata.list.RData")
load("excerptsdesign.RData")
load("adjdesign.RData")
load("adjectivecolors.RData")
partcols <- adj.catadata.list$partcols
adjbrick <- adj.catadata.list$adjbrick
adj.contingency <- adj.catadata.list$adjcontingency
adjcols <- adj.catadata.list$adjcols
listofwords <- adj.catadata.list$listofwords
nat.factor <- partcols$nationality
length(nat.factor)
col4nat <- nat.factor
length(col4nat)
nat.factor <- as.factor(nat.factor)
knitr::opts_chunk$set(echo = TRUE, cache = FALSE)
rm(list = ls())
library(ExPosition)
library(InPosition)
library(PTCA4CATA)
library(purrr)
library(tidyverse)
library(readxl)
library(stringr)
library(stringi)
library(wesanderson)
library(kableExtra)
library(ggplotify)
library(gridExtra)
library(grid)
library(abind)
powerpointFilename <- 'MusicalDescriptorsFigures.pptx'
path2pptx    <- '../Analysis/'
name4Graphs  <- paste0(path2pptx,powerpointFilename)
title4Graphs <- 'Musical Descriptors '
path2Data <- './Analysis/'
dataFilename1 <- 'MusDesc_US_data.csv'
path2file1 <- paste0(path2Data,dataFilename1)
# sheet2Read <- 'Data' Not necessary for this analysis,
# because the csv only has one sheet
fresh <- read.csv(path2file1)
dataFilename2 <- 'DescMusFeb4.csv'
path2file2 <- paste0(path2Data,dataFilename2) #this CSV is in the same fold
frdata <- read.csv(path2file2)
# remove the first two columns, which are qualtrics specific data
fresh <- fresh[-c(1,2),]
# remove all rows that were not completed.
fresh <- fresh[-c(which(fresh$Progress %s!==% "100")),]
#Select all columns that are adjective data
adjcols <- dplyr::select(fresh,contains("Excerpt"))
adjcolsfr <- dplyr::select(frdata,contains("Excerpt"))
# Dropping the qualtrics embedded rows and the first few participants, who were pilot participants
adjcols <- adjcols[-c(1:5), ]
rownames(adjcols) <- c(1:dim(adjcols)[[1]])
rownames(adjcolsfr) <- c((dim(adjcols)[[1]]+1):(dim(adjcols)[[1]]+dim(adjcolsfr)[[1]]))
#Select all columns that are participant data. We'll need this later
partcols <- fresh[ ,118:length(fresh)-1]
partcolsfr <- select(frdata, !contains("Excerpt"))
#Rename columns to something legible
colnames(partcols) <- c("age", "gender", "nationality", "job", "job_writein", "tr_yrs", "tr_type",
"inst", "inf", "inf_inst", "inf_yrs", "cho", "cho_yrs",
"other_perf", "other_type", "other_yrs", "teach", "teach_yrs")
colnames(partcolsfr) <- colnames(partcols)
#Drop unusable rows and rename 1:end
partcols <- partcols[-c(1:5),]
rownames(partcols) <- rownames(adjcols)
rownames(partcolsfr) <- rownames(adjcolsfr)
translationFile <- 'translations.xlsx'
path2file3 <- paste0(path2Data, translationFile)
thetranslations <- data.frame(read_xlsx(path2file3, col_names = F))
frenchadjs <- thetranslations[,2]
englishadjs <- thetranslations[,1]
for(i in 1:length(frenchadjs)){
adjcolsfr <- map(adjcolsfr, ~gsub(coll(frenchadjs[i]), x = .,
replacement = englishadjs[i]))
}
adjcolsfr <- do.call(cbind, adjcolsfr) %>% as.data.frame(.)
rownames(adjcolsfr) <- rownames(partcolsfr)
adjcolsfr$Excerpt.16 <- paste(adjcolsfr$Excerpt.16, adjcolsfr$Excerpt.16.1, sep = ",")
#adjcolsfr$Excerpt.18 <- paste(adjcolsfr$Excerpt.17, adjcolsfr$Excerpt.18, sep = ",")
#adjcolsfr$Excerpt.17[c(1:length(adjcolsfr$Excerpt17))] <- ""
#adjcolsfr <- adjcolsfr[,-c(16,17,18)]
adjcolsfr <- adjcolsfr[,-17]
#adjcols <- adjcols[,-c(16,17)]
partcols <- rbind(partcols, partcolsfr)
adjcols <- rbind(adjcols, adjcolsfr)
nationalities <- partcols$nationality
# for the vector on this next line, manually call "unique(nationalities)"
# and look through for which elements of that vector make sense here.
findtheamericans <- unique(nationalities)[c(2,3,4,5,6,7,9,10,11,16,17,19,21,22,
27,28,30,31,32,35,36,38,39,40,41,42,
46,47,49,52,54,55,58,59,60,63,64,67,
68)]
rows2use <- c(which(partcols$nationality %in% findtheamericans), which(partcols$nationality == "FR"))
adjcols <- adjcols[rows2use,]
partcols <- partcols[rows2use,]
partcols$nationality[partcols$nationality != "FR"] <- "AM"
# Find maximum number of words per response
commacount <- unlist(adjcols) %>% str_count(",") %>% na.omit(.) %>% max()
# Separate words into separate columns
allwords <- as.data.frame(unlist(adjcols))
wordmat <- separate(allwords, 1:length(allwords), into = as.character(c(1:(commacount+1))), sep = ',')
# Get the list of adjectives
listofwords <- unlist(wordmat) %>% unique()
listofwords <- listofwords[order(listofwords)] %>% stri_remove_empty(na_empty = T) #to remove the empty response and NA
#listofwordsfr <- unlist(wordmatfr) %>% unique()
#listofwordsfr <- listofwordsfr[order(listofwordsfr)] %>% stri_remove_empty(na_empty = T) #to remove the empty response and
#Create a vector of participant names
vec <- c(paste0("part", 1:dim(adjcols)[[1]]))
vec <- as.list(vec)
#Initialize an array to store the participant contingency tables
thebigone <- array(0, dim=c(ncol(adjcols),length(listofwords),dim(adjcols)[[1]]), dimnames = list(colnames(adjcols), listofwords, vec))
# Count all adjectives in each
for (k in 1:dim(adjcols)[[1]]){
for (i in 1:ncol(adjcols)){
q <- str_match(string = adjcols[k,i], pattern = listofwords)
j <- which(!is.na(q))
thebigone[i,j,k] <- 1
}
}
adj.cont.table <- apply(thebigone,c(1,2),sum)
adj.catadata.list <- list("adjbrick" = thebigone,
"adjcontingency" = adj.cont.table,
"partcols" = partcols,
"adjcols" = adjcols,
"listofwords" = listofwords
)
save(adj.catadata.list, file = "adj.catadata.list.RData")
natcols <- c(wes_palettes$Darjeeling2[2],wes_palettes$Darjeeling1[1])
nat.factor <- partcols$nationality
col4nat <- nat.factor
col4nat[col4nat == "AM"] <- natcols[1]
col4nat[col4nat == "FR"] <- natcols[2]
nat.factor <- as.factor(nat.factor)
train.factor <- as.double(partcols$tr_yrs)
train.factor[train.factor < 2] <- "Tr.none"
train.factor[train.factor >= 2 & train.factor <= 5] <- "Tr.little"
train.factor[train.factor != "Tr.none" & train.factor != "Tr.little"] <- "Tr.some"
traincols <- c(wes_palettes$Chevalier1[1],
wes_palettes$Darjeeling2[2],
wes_palettes$Darjeeling1[1])
col4train <- train.factor
col4train[col4train == "Tr.none"] <- traincols[1]
col4train[col4train == "Tr.little"] <- traincols[2]
col4train[col4train == "Tr.some"] <- traincols[3]
train.factor <- as.factor(train.factor)
gen.factor <- partcols$gender
gen.factor[gen.factor != "Female" & gen.factor != "Male"
& gen.factor != "Femme" & gen.factor != "Homme"] <- "NB"
gen.factor[gen.factor == "Female" | gen.factor == "Femme"] <- "F"
gen.factor[gen.factor == "Male" | gen.factor == "Homme"] <- "M"
gencols <- wes_palette("GrandBudapest1", n = 3, type = "discrete")
col4gen <- gen.factor
col4gen[col4gen == "M"] <- gencols[1]
col4gen[col4gen == "F"] <- gencols[2]
col4gen[col4gen == "NB"] <- gencols[3]
gen.factor <- as.factor(gen.factor)
col4adjs <- wes_palette("Zissou1", n = length(listofwords), type = "continuous")
# From Musical Dimensions.Rmd
load("excerptsdesignw6.RData")
col4excerpts <- ex.design.w6$col4exgrp
ex.cols <- ex.design.w6$ex.cols
cols <- list("g.gc" = gencols,
"g.oc" = col4gen,
"t.gc" = traincols,
"t.oc" = col4train,
"adj.cols" = col4adjs,
"ex.gc" = ex.cols,
"ex.oc" = col4excerpts,
"n.gc" = natcols,
"n.oc" = col4nat
)
rm(list = ls())
load("adj.catadata.list.RData")
load("excerptsdesign.RData")
load("adjdesign.RData")
load("adjectivecolors.RData")
partcols <- adj.catadata.list$partcols
adjbrick <- adj.catadata.list$adjbrick
adj.contingency <- adj.catadata.list$adjcontingency
adjcols <- adj.catadata.list$adjcols
listofwords <- adj.catadata.list$listofwords
nat.factor <- partcols$nationality
col4nat <- nat.factor
nat.factor <- as.factor(nat.factor)
cols$n.oc[nat.factor == "AM"] <- "#FF0000"
cols$n.oc[nat.factor == "FR"] <- "#046C9A"
cols$n.gc[1] <- "#FF0000"
cols$n.gc[2] <- "#046C9A"
length(cols$n.oc)
# Seed for random number generation
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, fig.align = "center",cache.extra = knitr::rand_seed)
set.seed(42)
papaja::r_refs("r-references.bib")
library("papaja")
suppressMessages(library(ExPosition))
suppressMessages(library(InPosition))
suppressMessages(library(MExPosition))
library(PTCA4CATA)
library(purrr)
library(plyr)
library(tidyverse)
library(readxl)
library(stringr)
library(stringi)
library(rlist)
library(wesanderson)
#library(kableExtra)
library(ggplotify)
library(gridExtra)
library(grid)
library(abind)
powerpointFilename <- 'Music-Descriptor-Space.pptx'
path2pptx    <- './Analysis/'
name4Graphs  <- paste0(path2pptx,powerpointFilename)
title4Graphs <- 'Music Descriptor Space '
load("catadatamusdim.RData")
musdimdata <- catadata.list$contingency#[,order(colnames(catadata.list$contingency))]
numberofdims <- catadata.list$numberofdims#[order(names(catadata.list$numberofdims))]
thebrick <- catadata.list$thebrick#[,order(colnames(catadata.list$contingency)),]
rows2drop <- c(6,14)
musdimdata.no6 <- musdimdata[-rows2drop,]
thebrick.no6 <- thebrick[-rows2drop,,]
# reorder some of the columns in the french experts dataset,
# taking only the ones we want to analyse for now
fr.ex.data <- catadata.list$french.expert.data[c(1:3,6,7,9:12),c(1,4,5,6,7)]
colnames(fr.ex.data) <- c("age", "gen", "nat", "tr_yrs", "tr_type")
fr.ex.data$gen[which(fr.ex.data$gen == "Homme")] <- "M"
fr.ex.data$gen[which(fr.ex.data$gen == "Femme")] <- "F"
fr.ex.data$nat <- "France"
fr.ex.data$tr_type[which(fr.ex.data$tr_type == "Instrumentale")] <- "Inst"
fr.ex.data$tr_type[which(fr.ex.data$tr_type == "Vocale")] <- "Voc"
am.ex.data <- catadata.list$expert.data[,c(1:3,6,7)]
colnames(am.ex.data) <- colnames(fr.ex.data)
am.ex.data$nat <- "USA"
am.ex.data$gen[which(am.ex.data$gen == "Male")] <- "M"
am.ex.data$gen[which(am.ex.data$gen == "Female")] <- "F"
am.ex.data$tr_type[which(am.ex.data$tr_type == "Instrumental")] <- "Inst"
am.ex.data$tr_type[which(am.ex.data$tr_type == "Vocal")] <- "Voc"
# Bind it all together
ex.data <- rbind(am.ex.data, fr.ex.data)
bygender <- as.factor(ex.data$gen)
bynationality <- as.factor(ex.data$nat)
dimcares.inf <- epCA.inference.battery(musdimdata.no6,
masses= NULL, weights= NULL,
hellinger = FALSE, symmetric = TRUE,
graphs =FALSE, test.iters = 1000)
# Seed for random number generation
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, fig.align = "center",cache.extra = knitr::rand_seed)
set.seed(42)
papaja::r_refs("r-references.bib")
rm(list = ls())
load("adj.catadata.list.RData")
load("excerptsdesign.RData")
load("adjdesign.RData")
load("adjectivecolors.RData")
partcols <- adj.catadata.list$partcols
adjbrick <- adj.catadata.list$adjbrick
adj.contingency <- adj.catadata.list$adjcontingency
adjcols <- adj.catadata.list$adjcols
listofwords <- adj.catadata.list$listofwords
nat.factor <- partcols$nationality
col4nat <- nat.factor
nat.factor <- as.factor(nat.factor)
cols$n.oc[nat.factor == "AM"] <- "#FF0000"
cols$n.oc[nat.factor == "FR"] <- "#046C9A"
cols$n.gc[1] <- "#FF0000"
cols$n.gc[2] <- "#046C9A"
adjsym.cares <- epCA(adj.contingency,
symmetric = TRUE)
library("papaja")
suppressMessages(library(ExPosition))
suppressMessages(library(InPosition))
suppressMessages(library(MExPosition))
library(PTCA4CATA)
library(purrr)
library(plyr)
library(tidyverse)
library(readxl)
library(stringr)
library(stringi)
library(rlist)
library(wesanderson)
#library(kableExtra)
library(ggplotify)
library(gridExtra)
library(grid)
library(abind)
# Seed for random number generation
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, fig.align = "center",cache.extra = knitr::rand_seed)
set.seed(42)
papaja::r_refs("r-references.bib")
rm(list = ls())
load("adj.catadata.list.RData")
load("excerptsdesign.RData")
load("adjdesign.RData")
load("adjectivecolors.RData")
partcols <- adj.catadata.list$partcols
adjbrick <- adj.catadata.list$adjbrick
adj.contingency <- adj.catadata.list$adjcontingency
adjcols <- adj.catadata.list$adjcols
listofwords <- adj.catadata.list$listofwords
nat.factor <- partcols$nationality
col4nat <- nat.factor
nat.factor <- as.factor(nat.factor)
cols$n.oc[nat.factor == "AM"] <- "#FF0000"
cols$n.oc[nat.factor == "FR"] <- "#046C9A"
cols$n.gc[1] <- "#FF0000"
cols$n.gc[2] <- "#046C9A"
adjsym.cares <- epCA(adj.contingency,
symmetric = TRUE)
adjrenorm <- CARenormalization(adjsym.cares$ExPosition.Data$fi,
delta = adjsym.cares$ExPosition.Data$pdq$Dv,
singularValues = T,
masses = adjsym.cares$ExPosition.Data$M
)
FIsym.adj <- adjsym.cares$ExPosition.Data$fi
FIasym.adj <- adjrenorm$G_A
FJs.adj <- adjsym.cares$ExPosition.Data$fj
CAEigs.adj <- adjsym.cares$ExPosition.Data$eigs
# Bootstrapping
bootCA.adj <- Boot4PTCA(ZeDataCube = adjbrick,
fi = FIsym.adj,
fj = FJs.adj,
eigs = CAEigs.adj,
nf2keep = 3,
nBootIter = 1000)
# Compute Bootstrapped ratios
bootRatadj.I <- PTCA4CATA::boot.ratio.test(bootCA.adj$RowsBoot,
critical.value = 2)
bootRatadj.J <- PTCA4CATA::boot.ratio.test(bootCA.adj$ColumnsBoot,
critical.value = 2)
# Probabilities
probBRadj.I  <- bootRatadj.I$prob.boot.ratios
probBRadj.J  <- bootRatadj.J$prob.boot.ratios
# Permutation tests
adjca.inf <- perm4PTCA(aCube = adjbrick,
nIter = 1000,
permType = 'byRows' ,
Malinvaud = TRUE)
Ind.Permu.adj    <- adjca.inf$permInertia
InertiaFixed.adj <- adjca.inf$fixedInertia
prob.cpt.lst.adj <- adjca.inf$MalinvaudQ['p-perm',]
# Get the p values for the components
prob.cpt.adj <- (unlist(prob.cpt.lst.adj[2:length(prob.cpt.lst.adj)]))
prob.cpt.adj[is.na(prob.cpt.adj)] <- 1
Cmat.adj <- createSymDist4PTCA(adjbrick)$CrossProduct
eigenCmat.adj <- eigen(Cmat.adj, symmetric = TRUE)
eig4Cmat.adj <-  eigenCmat.adj$values
tau4Cmat.adj <- round( (100*eig4Cmat.adj) / sum(eig4Cmat.adj))
nk       <- 3
F4Cmat.adj   <- eigenCmat.adj$vectors[,1:nk] %*% diag(eig4Cmat.adj[1:nk]^(1/2))
rownames(F4Cmat.adj) <- rownames(Cmat.adj)
ScreeInf <- PlotScree(ev = eig4Cmat.adj,
max.ev = NULL, alpha = 0.05,
col.ns = "#006D2C", col.sig = "#54278F",
title = "Participants Distance Analysis, Adjectives Survey: \nExplained Variance per Dimension",
plotKaiser = T)
a000.adj.screeRV <-  recordPlot()
Shortnames4Participants <-  dimnames(adjbrick[[3]])
F4Plot <- F4Cmat.adj
rownames(F4Plot) <- Shortnames4Participants
# Make labels
labels4RV <- createxyLabels.gen(1,2,lambda = eig4Cmat.adj, tau = tau4Cmat.adj)
#Here we calculate the means for the factor groupings, and then bootstrap them:
n.adjmeans <- getMeans(F4Plot, nat.factor)
BootCadj.N <- PTCA4CATA::Boot4Mean(F4Cmat.adj, design = nat.factor,
niter = 1000,
suppressProgressBar = TRUE)
dimnames(BootCadj.N$BootCube)[[2]] <- paste0('Dimension ',
1:dim(BootCadj.N$BootCube)[[2]])
# Create ellipses for the map
n.elliadj <- MakeCIEllipses(BootCadj.N$BootCube[,1:2,],
names.of.factors = c("Dimension 1", "Dimension 2"),
col = cols$n.gc)
#Base map
BaseMap.Participants <- createFactorMap(X = F4Plot ,
axis1 = 1, axis2 = 2,
display.points = TRUE,
# col.points = cols$n.oc,
pch = 19, cex = 2.5,
display.labels = TRUE,
# col.labels = cols$n.oc,
text.cex = 4, font.face = "bold",
font.family = "sans",
col.axes = "darkorchid",
alpha.points = .25,
alpha.axes = 0.2,
width.axes = 1.1,
col.background = adjustcolor("lavender",
alpha.f = 0.2),
force = 1, segment.size = 3)
#Nationality map
title4RV <- "RV Analysis of Participants \nIncluding Group Means and Confidence Intervals"
n.rv.means <- createFactorMap(n.adjmeans,
axis1 = 1, axis2 = 2,
constraints = BaseMap.Participants$constraints,
#  col.points =  cols$n.gc,
alpha.points = 1, # no transparency
alpha.labels = 1,
display.points = TRUE,
pch = 17, cex = 5,
display.labels = TRUE,
#                              title = title4RV,
# col.labels = cols$n.gc,
text.cex = 6,font.face = "bold",
font.family = "sans", col.axes = "darkorchid",
alpha.axes = 0.2, width.axes = 1.1,
col.background = adjustcolor("lavender", alpha.f = 0.2),
force = 1, segment.size = 0)
a.03adj.map4part <- BaseMap.Participants$zeMap_background +
n.rv.means$zeMap_text + n.rv.means$zeMap_dots +
BaseMap.Participants$zeMap_dots + n.elliadj + labels4RV
print(a.03adj.map4part)
print(a.03adj.map4part)
unique(partcols$nationality)
gc
gc()
