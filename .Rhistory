colors4Items = cols$ex.oc,
names4Partial = c("A", "Q"),
font.labels = 'bold'
)
partialfstestmap <- MFA_testFMap$zeMap +
label4testMap +
map4testPFS$linesColByItems +
map4testPFS$pointsColByItems +
map4testPFS$labelsColByItems +
ggtitle("Contributions to the Excerpts Factor Scores")
print(partialfstestmap)
# Seed for random number generation
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, fig.align = "center",cache.extra = knitr::rand_seed)
set.seed(42)
papaja::r_refs("r-references.bib")
rm(list = ls())
load("adj.catadata.list.RData")
load("excerptsdesign.RData")
load("adjdesign.RData")
load("adjectivecolors.RData")
partcols <- adj.catadata.list$partcols
adjbrick <- adj.catadata.list$adjbrick
adj.contingency <- adj.catadata.list$adjcontingency
adjcols <- adj.catadata.list$adjcols
listofwords <- adj.catadata.list$listofwords
nat.factor <- partcols$nationality
col4nat <- nat.factor
nat.factor <- as.factor(nat.factor)
train.factor <- as.double(partcols$tr_yrs)
train.factor[train.factor < 2] <- "Tr.none"
train.factor[train.factor >= 2 & train.factor <= 5] <- "Tr.little"
train.factor[train.factor != "Tr.none" & train.factor != "Tr.little"] <- "Tr.some"
train.factor <- as.factor(train.factor)
gen.factor <- partcols$gender
gen.factor[gen.factor != "Female" & gen.factor != "Male"
& gen.factor != "Femme" & gen.factor != "Homme"] <- "NB"
gen.factor[gen.factor == "Female" | gen.factor == "Femme"] <- "F"
gen.factor[gen.factor == "Male" | gen.factor == "Homme"] <- "M"
gen.factor <- as.factor(gen.factor)
adjsym.cares <- epCA(adj.contingency,
symmetric = TRUE)
library("papaja")
suppressMessages(library(ExPosition))
suppressMessages(library(InPosition))
suppressMessages(library(MExPosition))
library(PTCA4CATA)
library(purrr)
library(plyr)
library(tidyverse)
library(readxl)
library(stringr)
library(stringi)
library(rlist)
library(wesanderson)
#library(kableExtra)
library(ggplotify)
library(gridExtra)
library(grid)
library(abind)
rm(list = ls())
load("adj.catadata.list.RData")
load("excerptsdesign.RData")
load("adjdesign.RData")
load("adjectivecolors.RData")
partcols <- adj.catadata.list$partcols
adjbrick <- adj.catadata.list$adjbrick
adj.contingency <- adj.catadata.list$adjcontingency
adjcols <- adj.catadata.list$adjcols
listofwords <- adj.catadata.list$listofwords
nat.factor <- partcols$nationality
col4nat <- nat.factor
nat.factor <- as.factor(nat.factor)
train.factor <- as.double(partcols$tr_yrs)
train.factor[train.factor < 2] <- "Tr.none"
train.factor[train.factor >= 2 & train.factor <= 5] <- "Tr.little"
train.factor[train.factor != "Tr.none" & train.factor != "Tr.little"] <- "Tr.some"
train.factor <- as.factor(train.factor)
gen.factor <- partcols$gender
gen.factor[gen.factor != "Female" & gen.factor != "Male"
& gen.factor != "Femme" & gen.factor != "Homme"] <- "NB"
gen.factor[gen.factor == "Female" | gen.factor == "Femme"] <- "F"
gen.factor[gen.factor == "Male" | gen.factor == "Homme"] <- "M"
gen.factor <- as.factor(gen.factor)
adjsym.cares <- epCA(adj.contingency,
symmetric = TRUE)
adjrenorm <- CARenormalization(adjsym.cares$ExPosition.Data$fi,
delta = adjsym.cares$ExPosition.Data$pdq$Dv,
singularValues = T,
masses = adjsym.cares$ExPosition.Data$M
)
FIsym.adj <- adjsym.cares$ExPosition.Data$fi
FIasym.adj <- adjrenorm$G_A
FJs.adj <- adjsym.cares$ExPosition.Data$fj
CAEigs.adj <- adjsym.cares$ExPosition.Data$eigs
# Bootstrapping
bootCA.adj <- Boot4PTCA(ZeDataCube = adjbrick,
fi = FIsym.adj,
fj = FJs.adj,
eigs = CAEigs.adj,
nf2keep = 3,
nBootIter = 500)
# Compute Bootstrapped ratios
bootRatadj.I <- PTCA4CATA::boot.ratio.test(bootCA.adj$RowsBoot,
critical.value = 2)
bootRatadj.J <- PTCA4CATA::boot.ratio.test(bootCA.adj$ColumnsBoot,
critical.value = 2)
# Probabilities
probBRadj.I  <- bootRatadj.I$prob.boot.ratios
probBRadj.J  <- bootRatadj.J$prob.boot.ratios
# Permutation tests
adjca.inf <- perm4PTCA(aCube = adjbrick,
nIter = 1000,
permType = 'byRows' ,
Malinvaud = TRUE)
Ind.Permu.adj    <- adjca.inf$permInertia
InertiaFixed.adj <- adjca.inf$fixedInertia
prob.cpt.lst.adj <- adjca.inf$MalinvaudQ['p-perm',]
# Get the p values for the components
prob.cpt.adj <- (unlist(prob.cpt.lst.adj[2:length(prob.cpt.lst.adj)]))
prob.cpt.adj[is.na(prob.cpt.adj)] <- 1
Cmat.adj <- createSymDist4PTCA(adjbrick)$CrossProduct
eigenCmat.adj <- eigen(Cmat.adj, symmetric = TRUE)
eig4Cmat.adj <-  eigenCmat.adj$values
tau4Cmat.adj <- round( (100*eig4Cmat.adj) / sum(eig4Cmat.adj))
nk       <- 3
F4Cmat.adj   <- eigenCmat.adj$vectors[,1:nk] %*% diag(eig4Cmat.adj[1:nk]^(1/2))
rownames(F4Cmat.adj) <- rownames(Cmat.adj)
ScreeInf <- PlotScree(ev = eig4Cmat.adj,
max.ev = NULL, alpha = 0.05,
col.ns = "#006D2C", col.sig = "#54278F",
title = "Participants Distance Analysis, Adjectives Survey: \nExplained Variance per Dimension",
plotKaiser = T)
a000.adj.screeRV <-  recordPlot()
Shortnames4Participants <-  dimnames(adjbrick[[3]])
F4Plot <- F4Cmat.adj
rownames(F4Plot) <- Shortnames4Participants
# Make labels
labels4RV <- createxyLabels.gen(1,2,lambda = eig4Cmat.adj, tau = tau4Cmat.adj)
#Here we calculate the means for the factor groupings, and then bootstrap them:
n.adjmeans <- getMeans(F4Plot, nat.factor)
BootCadj.N <- PTCA4CATA::Boot4Mean(F4Cmat.adj, design = nat.factor,
niter = 1000,
suppressProgressBar = TRUE)
dimnames(BootCadj.N$BootCube)[[2]] <- paste0('Dimension ',
1:dim(BootCadj.N$BootCube)[[2]])
# Create ellipses for the map
n.elliadj <- MakeCIEllipses(BootCadj.N$BootCube[,1:2,],
names.of.factors = c("Dimension 1", "Dimension 2"),
col = cols$n.gc)
#Base map
BaseMap.Participants <- createFactorMap(X = F4Plot ,
axis1 = 1, axis2 = 2,
display.points = TRUE,
col.points = cols$n.oc,
pch = 19, cex = 2.5,
display.labels = TRUE,
col.labels = cols$n.oc,
text.cex = 4, font.face = "bold",
font.family = "sans",
col.axes = "darkorchid",
alpha.points = .25,
alpha.axes = 0.2,
width.axes = 1.1,
col.background = adjustcolor("lavender",
alpha.f = 0.2),
force = 1, segment.size = 3)
#Nationality map
title4RV <- "Rv Analysis of Participants \nIncluding Group Means and Confidence Intervals"
n.rv.means <- createFactorMap(n.adjmeans,
axis1 = 1, axis2 = 2,
constraints = BaseMap.Participants$constraints,
col.points =  cols$n.gc,
alpha.points = 1, # no transparency
alpha.labels = 1,
display.points = TRUE,
pch = 17, cex = 5,
display.labels = TRUE,
title = title4RV,
col.labels = cols$n.gc,
text.cex = 6,font.face = "bold",
font.family = "sans", col.axes = "darkorchid",
alpha.axes = 0.2, width.axes = 1.1,
col.background = adjustcolor("lavender", alpha.f = 0.2),
force = 1, segment.size = 0)
a.03adj.map4part <- BaseMap.Participants$zeMap_background +
n.rv.means$zeMap_text + n.rv.means$zeMap_dots +
BaseMap.Participants$zeMap_dots + n.elliadj + labels4RV
print(a.03adj.map4part + ggtitle(title4RV))
signed.ctrI.adj <- adjsym.cares$ExPosition.Data$ci * sign(FIsym.adj)
signed.ctrJ.adj <- adjsym.cares$ExPosition.Data$cj * sign(FJs.adj)
CIlist <- vector(mode = "list", length = 2)
CJlist <- vector(mode = "list", length= 2)
names(CIlist) <- c("Dim1", "Dim2")
names(CJlist) <- c("Dim1", "Dim2")
for (i in 1:3){
CIlist[[i]] <- signed.ctrI.adj[which(abs(signed.ctrI.adj[,i]) > 1/nrow(signed.ctrI.adj)),i]
CJlist[[i]] <- signed.ctrJ.adj[which(abs(signed.ctrJ.adj[,i]) > 1/nrow(signed.ctrJ.adj)),i]
}
# plot contributions of rows for component 1
ctradjI.1 <- PrettyBarPlot2(CIlist[[1]],
threshold = 1 / NROW(signed.ctrI.adj),
font.size = 3,
color4bar = cols$ex.oc[which(abs(signed.ctrI.adj[,1]) > 1/nrow(signed.ctrI.adj))], # we need hex code
ylab = 'Contributions',
#sortValues = TRUE,
ylim = c(1.2*min(CIlist[[1]]), 1.2*max(CIlist[[1]]))
) + ggtitle("Component 1", subtitle = 'Rows')
# plot contributions of columns for component 1
ctradjJ.1 <- PrettyBarPlot2(CJlist$Dim1,
threshold = 1 / NROW(signed.ctrJ.adj),
font.size = 3,
color4bar = cols$adj.oc[which(abs(signed.ctrJ.adj[,1]) > 1/nrow(signed.ctrJ.adj))], # we need hex code
ylab = 'Contributions',
# sortValues = TRUE,
ylim = c(1.2*min(CJlist[[1]]), 1.2*max(CJlist[[1]]))
) + ggtitle("", subtitle = 'Columns')
# plot contributions of rows for component 2
ctradjI.2 <- PrettyBarPlot2(CIlist[[2]],
threshold = 1 / NROW(signed.ctrI.adj),
font.size = 3,
color4bar = cols$ex.oc[which(abs(signed.ctrI.adj[,2]) > 1/nrow(signed.ctrI.adj))], # we need hex code
ylab = 'Contributions',
# sortValues = TRUE,
ylim = c(1.2*min(signed.ctrI.adj[,2]), 1.2*max(signed.ctrI.adj[,2]))
) + ggtitle("Component 2", subtitle = 'Rows')
# plot contributions of columns for component 2
ctradjJ.2 <- PrettyBarPlot2(CJlist$Dim2,
threshold = 1 / NROW(signed.ctrJ.adj),
font.size = 3,
color4bar = cols$adj.oc[which(abs(signed.ctrJ.adj[,2]) > 1/nrow(signed.ctrJ.adj))], # we need hex code
ylab = 'Contributions',
# sortValues = TRUE,
ylim = c(1.2*min(signed.ctrJ.adj[,2]), 1.2*max(signed.ctrJ.adj[,2]))
) + ggtitle("", subtitle = 'Columns')
grid.arrange(
as.grob(ctradjI.1),as.grob(ctradjJ.1),
as.grob(ctradjI.2),as.grob(ctradjJ.2),
ncol = 2,nrow = 2,
top = textGrob("Contributions", gp = gpar(fontsize = 18, font = 3))
)
Ctradj.IJ <- recordPlot()
#yellow is 1, blue is 2, green is 3, red is 4.
adjbrick.AM <- adjbrick[,,1:length(which(adj.catadata.list$partcols$nationality == "AM"))]
adj.cont.AM <- apply(adjbrick.AM, c(1,2), sum)
adjbrick.FR <- adjbrick[,,(length(which(adj.catadata.list$partcols$nationality == "AM"))+1):dim(adjbrick)[[3]]]
adj.cont.FR <- apply(adjbrick.FR, c(1,2), sum)
adj.fr.cares <- epCA(adj.cont.FR, symmetric = TRUE)
adj.am.cares <- epCA(adj.cont.AM, symmetric = TRUE)
adj.fr.cares$ExPosition.Data$fi[,2] <- adj.fr.cares$ExPosition.Data$fi[,2]*-1
adj.fr.cares$ExPosition.Data$fj[,2] <- adj.fr.cares$ExPosition.Data$fj[,2]*-1
am.FI <- adj.am.cares$ExPosition.Data$fi
am.FJ <- adj.am.cares$ExPosition.Data$fj
fr.FI <- adj.fr.cares$ExPosition.Data$fi
fr.FJ <- adj.fr.cares$ExPosition.Data$fj
rownames(am.FI) <- rownames(fr.FI) <- rownames(FIsym.adj) <- c(1:30)
colnames(adjrenorm$G_A) <- colnames(FJs.adj)
axisone <- 1
axistwo <- 2
exmap <- createFactorMapIJ(FIsym.adj,
FJs.adj,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 3.5, text.cex.j = 3.5,
font.face.j = 'italic',
)
# It's a fairly complex simplex, so we specify the vertices between which the
# simplex should be drawn.
#excerptedges <- c("Fast", "Aggressive", "Disturbing", "Dark", "Sad",
#                  "Slow", "Soft", "Warm", "Happy")
#simplexorder <- match(excerptedges, colnames(adj.contingency))
#zePoly.J <- PTCA4CATA::ggdrawPolygon(FJs.adj, order2draw = simplexorder)
vc.labels <- createxyLabels(resCA = adjsym.cares)
am.labels <- createxyLabels(resCA = adj.am.cares)
fr.labels <- createxyLabels(resCA = adj.fr.cares)
exmap.am <- createFactorMapIJ(am.FI,
am.FJ,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 5, text.cex.j = 3.5, font.face.j = 'italic'
)
exmap.fr <- createFactorMapIJ(fr.FI,
fr.FJ,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 5, text.cex.j = 3.5, font.face.j = 'italic'
)
mus.adj.am <- exmap.am$baseMap +
exmap.am$I_points +
exmap.am$I_labels +
exmap.am$J_points +
exmap.am$J_labels +
am.labels + ggtitle('American Participants')
mus.adj.fr <- exmap.fr$baseMap +
exmap.fr$I_points +
exmap.fr$I_labels +
exmap.fr$J_points +
exmap.fr$J_labels +
fr.labels + ggtitle('French Participants')
mus.adj.004 <- exmap$baseMap + #zePoly.J +
exmap$I_points +
exmap$I_labels +
exmap$J_points +
exmap$J_labels +
vc.labels + ggtitle('Symmetric Map of Row and Column Factor Scores')
grid.arrange(
as.grob(mus.adj.am),as.grob(mus.adj.fr),
ncol = 2,nrow = 1,
top = textGrob("Symmetric Maps of the Row and Column Factor Scores", gp = gpar(fontsize = 18, font = 3))
)
am_fr_adjmaps <- recordPlot()
print(mus.adj.004)
library(MExPosition)
adj4MFA <- abind(adj.cont.FR, adj.cont.AM, along = 2)
frvec <- t(as.data.frame(rep("FR", length.out = dim(adj.cont.FR)[2])))
amvec <- t(as.data.frame(rep("AM", length.out = dim(adj.cont.AM)[2])))
colnames(frvec) <- colnames(amvec) <- colnames(adj.cont.FR)
rownames(frvec) <- rownames(amvec) <- "group"
mfagroups <- abind(frvec, amvec, along = 2)
mfares <- mpMFA(adj4MFA, mfagroups)
renameCols <- function(x){
colnames(x) <- paste("Dimension", 1:ncol(x))
x
}
RVmat <- mfares$mexPosition.Data$InnerProduct$RVMatrix
#corrplot(RVmat, method = "color", addCoefasPercent = TRUE)
Eig4scree <- mfares$mexPosition.Data$Table$eigs
#mfascree <- PlotScree(Eig4scree, plotKaiser = TRUE)
MFA_FMap <- createFactorMap(
mfares$mexPosition.Data$Table$fi,
col.points = cols$ex.oc,
col.labels = cols$ex.oc,
alpha.points = .6,
pch = 17,
cex = 5,
display.labels = TRUE,
constraints = minmaxHelper4Partial(FactorScores = mfares$mexPosition.Data$Table$fi,
partialFactorScores = mfares$mexPosition.Data$Table$partial.fi.array)
)
label4Map <- createxyLabels.gen(1,2,
lambda = mfares$mexPosition.Data$Table$eigs,
tau = mfares$mexPosition.Data$Table$t,
axisName = "Dimension ")
fi4pfs <- mfares$mexPosition.Data$Table$fi
fi4pfs <- renameCols(fi4pfs)
pfi4pfs <- mfares$mexPosition.Data$Table$partial.fi.array
pfi4pfs <- renameCols(pfi4pfs)
rownames(pfi4pfs) <- c(1:30)
dimnames(pfi4pfs)[[3]] <- c("FR", "AM")
map4PFS <- createPartialFactorScoresMap(
factorScores = fi4pfs,
partialFactorScores = pfi4pfs,
axis1 = 1, axis2 = 2,
colors4Items = cols$ex.oc,
names4Partial = c("FR", "AM"),
font.labels = 'bold'
)
partialfsmap <- MFA_FMap$zeMap +
label4Map +
map4PFS$linesColByItems +
map4PFS$pointsColByItems +
map4PFS$labelsColByItems +
ggtitle("Contributions to the Excerpts Factor Scores")
adj4MFA.T <- abind(t(adj.cont.FR), t(adj.cont.AM), along = 2)
natvec <- rep(c("FR", "AM"), times = dim(adj4MFA.T)[2]/2)
natvec <- data.frame(natvec[order(natvec, decreasing = T)]) %>% t(.)
colnames(natvec) <- colnames(adj4MFA.T)
rownames(natvec) <- "group"
mfares.t <- mpMFA(adj4MFA.T, natvec)
RVmat.t <- mfares.t$mexPosition.Data$InnerProduct$RVMatrix
#corrplot(RVmat, method = "color", addCoefasPercent = TRUE)
Eig4scree <- mfares$mexPosition.Data$Table$eigs
#mfascree <- PlotScree(Eig4scree, plotKaiser = TRUE)
MFA_FMap.t <- createFactorMap(
mfares.t$mexPosition.Data$Table$fi,
col.points = cols$adj.oc,
col.labels = cols$adj.oc,
alpha.points = .6,
pch = 17,
cex = 5,
display.labels = TRUE,
constraints = minmaxHelper4Partial(FactorScores = mfares.t$mexPosition.Data$Table$fi,
partialFactorScores = mfares.t$mexPosition.Data$Table$partial.fi.array)
)
label4Map.t <- createxyLabels.gen(1,2,
lambda = mfares.t$mexPosition.Data$Table$eigs,
tau = mfares.t$mexPosition.Data$Table$t,
axisName = "Dimension ")
fi4pfs.t <- mfares.t$mexPosition.Data$Table$fi
fi4pfs.t <- renameCols(fi4pfs.t)
pfi4pfs.t <- mfares.t$mexPosition.Data$Table$partial.fi.array
pfi4pfs.t <- renameCols(pfi4pfs.t)
rownames(pfi4pfs.t) <- colnames(adj.contingency)
dimnames(pfi4pfs.t)[[3]] <- c("FR", "AM")
map4PFS.t <- createPartialFactorScoresMap(
factorScores = fi4pfs.t,
partialFactorScores = pfi4pfs.t,
axis1 = 1, axis2 = 2,
colors4Items = cols$adj.oc,
names4Partial = c("FR", "AM"),
font.labels = 'bold',
# alpha.lines = .75, size.lines = 3
)
partialfsmap.t <- MFA_FMap.t$zeMap +
label4Map.t +
map4PFS.t$linesColByItems +
map4PFS.t$pointsColByItems +
map4PFS.t$labelsColByItems +
ggtitle("Contributions to the Adjectives Factor Scores")
grid.arrange(as.grob(partialfsmap),
as.grob(partialfsmap.t),
ncol = 2, nrow = 1,
top = textGrob("Partial Factor Scores Plots for French and American Participants"))
mfasbs <- recordPlot()
grid.arrange(as.grob(partialfsmap),
as.grob(partialfsmap.t),
ncol = 2, nrow = 1,
top = textGrob("Partial Factor Scores Plots for French and American Participants"))
mfasbs <- recordPlot()
partialfsmap
partialfsmap
print(partialfsmap)
print(partialfsmap)
print(partialfsmap.t)
partialfsmap
grid.arrange(as.grob(partialfsmap),
as.grob(partialfsmap.t),
ncol = 2, nrow = 1,
top = textGrob("Partial Factor Scores Plots for French and American Participants"))
mfasbs <- recordPlot()
print(partialfsmap)
print(partialfsmap.t)
dev.off()
print(partialfsmap)
dev.off
dev.off()
dev.cur()
dev.off(12)
print(partialfsmap)
print(mus.adj.004)
dev.off()
grid.arrange(as.grob(partialfsmap),
as.grob(partialfsmap.t),
ncol = 2, nrow = 1,
top = textGrob("Partial Factor Scores Plots for French and American Participants"),
print.eval = TRUE)
dev.off()
print(partialfsmap)
print(partialfsmap.t)
grid.arrange(as.grob(partialfsmap),
as.grob(partialfsmap.t),
ncol = 2, nrow = 1,
top = textGrob("Partial Factor Scores Plots for French and American Participants"),
print.eval = TRUE)
grid.arrange(as.grob(partialfsmap),
as.grob(partialfsmap.t),
ncol = 2, nrow = 2,
top = textGrob("Partial Factor Scores Plots for French and American Participants"),
print.eval = TRUE)
grid.arrange(as.grob(partialfsmap),
as.grob(partialfsmap.t),
ncol = 2, nrow = 1,
top = textGrob("Partial Factor Scores Plots for French and American Participants"),
)
library("papaja")
suppressMessages(library(ExPosition))
suppressMessages(library(InPosition))
suppressMessages(library(MExPosition))
library(PTCA4CATA)
library(purrr)
library(plyr)
library(tidyverse)
library(readxl)
library(stringr)
library(stringi)
library(rlist)
library(wesanderson)
#library(kableExtra)
library(ggplotify)
library(gridExtra)
library(grid)
library(abind)
# Seed for random number generation
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, fig.align = "center",cache.extra = knitr::rand_seed)
set.seed(42)
papaja::r_refs("r-references.bib")
grid.arrange(as.grob(partialfsmap),
as.grob(partialfsmap.t),
ncol = 2, nrow = 1, arrangeGrob()
top = textGrob("Partial Factor Scores Plots for French and American Participants"),
grid.arrange(as.grob(partialfsmap),
as.grob(partialfsmap.t),
ncol = 2, nrow = 1,
top = textGrob("Partial Factor Scores Plots for French and American Participants"),
)
grid.arrange(as.grob(partialfsmap),
as.grob(partialfsmap.t),
ncol = 2, nrow = 1,
top = textGrob("Partial Factor Scores Plots for French and American Participants")
)
mfasbs <- recordPlot()
print(partialfsmap)
print(partialfsmap.t)
?createSymDist4PTCA
