}
ctri <- pls.res$TExPosition.Data$ci*sign(pls.res$TExPosition.Data$fi)
ctrj <- pls.res$TExPosition.Data$cj * sign(pls.res$TExPosition.Data$fj)
conts.sigonly <- barplot.sigonly(x = ctri,
y = ctrj,
th = "mean",
type = "cont")
contribution1 <- PrettyBarPlot2(bootratio = conts.sigonly$data$Dim1,
threshold = conts.sigonly$t.hold$thr.tog,
ylim = conts.sigonly$data$y.limits$ylims.tog$Dim1,
color4bar = c(conts.sigonly$color$x.vec$Dim1, conts.sigonly$color$y.vec$Dim1),
color4ns = "gray75",
plotnames = TRUE,
main = 'Contributions to the First Latent Variables',
ylab = "Signed Contributions"
#font.size = 1
)
contribution2 <- PrettyBarPlot2(bootratio = conts.sigonly$data$Dim2,
threshold = conts.sigonly$t.hold$thr.tog,
ylim =conts.sigonly$data$y.limits$ylims.tog$Dim2,
color4bar = c(conts.sigonly$color$x.vec$Dim2, conts.sigonly$color$y.vec$Dim2),
color4ns = "gray75",
plotnames = TRUE,
main = 'Contributions to the Second Latent Variables',
ylab = "Signed Contributions",
#font.size = 1
)
contributionsplot <- grid.arrange(
as.grob(contribution1),
as.grob(contribution2),
ncol = 1,nrow = 2
)
latvar.1 <- cbind(pls.res$TExPosition.Data$lx[,1],pls.res$TExPosition.Data$ly[,1])
colnames(latvar.1) <- c("Lx 1", "Ly 1")
zedesign <- adj.design$thedesign[-6]
lescoleurs <- adj.design$ex.cols[-6]
coleur4group <- adj.design$col4exgrp
# compute means
lv.1.group <- getMeans(latvar.1, zedesign)
dim(latvar/1)
dim(latvar.1)
latvar.1 <- cbind(pls.res$TExPosition.Data$lx[,1],pls.res$TExPosition.Data$ly[,1])
colnames(latvar.1) <- c("Lx 1", "Ly 1")
zedesign <- adj.design$thedesign[-c(6,14)]
lescoleurs <- adj.design$ex.cols[-c(6,14)]
coleur4group <- adj.design$col4exgrp
# compute means
lv.1.group <- getMeans(latvar.1, zedesign)
# get bootstrap intervals of groups
lv.1.group.boot <- Boot4Mean(latvar.1, zedesign)
colnames(lv.1.group.boot$BootCube) <- c("Lx 1", "Ly 1")
#Next, we can start plotting:
plot.lv1 <- createFactorMap(latvar.1,
col.points = lescoleurs,
col.labels = lescoleurs,
alpha.points = 0.4, alpha.labels = 0.4,
text.cex = 3, title = "Latent Variable Plot 1"
)
plot1.mean <- createFactorMap(lv.1.group,
col.points = coleur4group,
col.labels = coleur4group,
cex = 4,
pch = 17,
alpha.points = 0.8,
text.cex = 6)
plot1.meanCI <- MakeCIEllipses(lv.1.group.boot$BootCube[,c(1:2),], # get the first two components
col = adj.design$col4exgrp,
names.of.factors = c("Lx 1", "Ly 1")
)
plot1 <- plot.lv1$zeMap_background + plot.lv1$zeMap_dots + plot.lv1$zeMap_text +
plot1.mean$zeMap_text + plot1.meanCI
latvar.2 <- cbind(pls.res$TExPosition.Data$lx[,2],pls.res$TExPosition.Data$ly[,2])
colnames(latvar.2) <- c("Lx 2", "Ly 2")
# compute means
lv.2.group <- getMeans(latvar.2, zedesign)
# get bootstrap intervals of groups
lv.2.group.boot <- Boot4Mean(latvar.2, zedesign)
colnames(lv.2.group.boot$BootCube) <- c("Lx 2", "Ly 2")
#Next, we can start plotting:
plot.lv2 <- createFactorMap(latvar.2,
col.points = lescoleurs,
col.labels = lescoleurs,
alpha.points = 0.4, alpha.labels = 0.4,
text.cex = 3, title = "Latent Variable Plot 2"
)
plot2.mean <- createFactorMap(lv.2.group,
col.points = coleur4group,
col.labels = coleur4group,
cex = 4,
pch = 17,
alpha.points = 0.8,
text.cex = 6)
plot2.meanCI <- MakeCIEllipses(lv.2.group.boot$BootCube[,c(1:2),], # get the first two components
col = coleur4group,
names.of.factors = c("Lx 2", "Ly 2")
)
plot2 <- plot.lv2$zeMap_background + plot.lv2$zeMap_dots + plot.lv2$zeMap_text +
plot2.mean$zeMap_text + plot2.meanCI
plsc.fplot <- grid.arrange(
as.grob(plot1),
as.grob(plot2),
ncol = 2,nrow = 1
)
# Seed for random number generation
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, fig.align = "center",cache.extra = knitr::rand_seed)
set.seed(42)
papaja::r_refs("r-references.bib")
library("papaja")
suppressMessages(library(ExPosition))
suppressMessages(library(InPosition))
library(PTCA4CATA)
library(purrr)
library(plyr)
library(tidyverse)
library(readxl)
library(stringr)
library(stringi)
library(rlist)
library(wesanderson)
#library(kableExtra)
library(ggplotify)
library(gridExtra)
library(grid)
library(abind)
load("catadatamusdim.RData")
musdimdata <- catadata.list$contingency
numberofdims <- catadata.list$numberofdims
thebrick <- catadata.list$thebrick
rows2drop <- c(6,14)
musdimdata.no6 <- musdimdata[-rows2drop,]
thebrick.no6 <- thebrick[-rows2drop,,]
# reorder some of the columns in the french experts dataset,
# taking only the ones we want to analyse for now
fr.ex.data <- catadata.list$french.expert.data[c(1:3,6,7,9:12),c(1,4,5,6,7)]
colnames(fr.ex.data) <- c("age", "gen", "nat", "tr_yrs", "tr_type")
fr.ex.data$gen[which(fr.ex.data$gen == "Homme")] <- "M"
fr.ex.data$gen[which(fr.ex.data$gen == "Femme")] <- "F"
fr.ex.data$nat <- "FR"
fr.ex.data$tr_type[which(fr.ex.data$tr_type == "Instrumentale")] <- "Inst"
fr.ex.data$tr_type[which(fr.ex.data$tr_type == "Vocale")] <- "Voc"
am.ex.data <- catadata.list$expert.data[,c(1:3,6,7)]
colnames(am.ex.data) <- colnames(fr.ex.data)
am.ex.data$nat <- "AM"
am.ex.data$gen[which(am.ex.data$gen == "Male")] <- "M"
am.ex.data$gen[which(am.ex.data$gen == "Female")] <- "F"
am.ex.data$tr_type[which(am.ex.data$tr_type == "Instrumental")] <- "Inst"
am.ex.data$tr_type[which(am.ex.data$tr_type == "Vocal")] <- "Voc"
# Bind it all together
ex.data <- rbind(am.ex.data, fr.ex.data)
bygender <- as.factor(ex.data$gen)
bynationality <- as.factor(ex.data$nat)
dimcares.inf <- epCA.inference.battery(musdimdata.no6,
masses= NULL, weights= NULL,
hellinger = FALSE, symmetric = TRUE,
graphs =FALSE, test.iters = 1000)
# Renormalize the results of CA
RenormFi <- CARenormalization(G = dimcares.inf$Fixed.Data$ExPosition.Data$fi,
delta = dimcares.inf$Fixed.Data$ExPosition.Data$pdq$Dv,
singularValues = TRUE,
masses = NULL)
# Factor Scores
FIsym  <- dimcares.inf$Fixed.Data$ExPosition.Data$fi
FIasym <- RenormFi$G_A
FJs    <- dimcares.inf$Fixed.Data$ExPosition.Data$fj
CA.Q.Eigs <- dimcares.inf$Fixed.Data$ExPosition.Data$eigs
CA.Q.pEig <- dimcares.inf$Inference.Data$components$eigs.perm
# Participant colors:
col4M <- wes_palettes$Rushmore1[3]
col4F <- wes_palettes$Rushmore1[5]
col4FR <- wes_palettes$Darjeeling1[1]
col4AM <- wes_palettes$Darjeeling2[2]
#
col4byG <- as.character(bygender)
col4byG[col4byG == "F"] <- col4F
col4byG[col4byG == "M"] <- col4M
col4byN <- as.character(bynationality)
col4byN[col4byN == "FR"] <- col4FR
col4byN[col4byN == "AM"] <- col4AM
# To account for the fact that we removed some rows above:
numberofdims[c(1,7,8,9,10)] <- c(8,7,3,4,6)
numberofdims <- numberofdims[-11]
col4cols <- wes_palette("FantasticFox1",
length(numberofdims), type = "continuous")
col4cols <- rep(col4cols, numberofdims)
bootCA <- Boot4PTCA(ZeDataCube = thebrick.no6,
fi = FIsym,
fj = FJs,
eigs = CA.Q.Eigs,
nf2keep = 3,
nBootIter = 500)
# Compute Bootstrapped ratios
bootRatios.I <- PTCA4CATA::boot.ratio.test(bootCA$RowsBoot,
critical.value = 2)
bootRatios.J <- PTCA4CATA::boot.ratio.test(bootCA$ColumnsBoot,
critical.value = 2)
# Probabilities
probBR.I  <- bootRatios.I$prob.boot.ratios
probBR.J  <- bootRatios.J$prob.boot.ratios
# We have a problem here because most matrices
#  have lines with zeros. A symmetric difference matrix
#  would do better than an RV or a
#  chi2 distance so we use createSymDist4PTCA
Cmat.Q <- createSymDist4PTCA(thebrick)$CrossProduct
# Calculate the eigenvalues and the percentage of variance extracted (tau)
eigenCmat.Q <- eigen(Cmat.Q, symmetric = TRUE)
eig4Cmat.Q <-  eigenCmat.Q$values
tau4Cmat.Q <- round( (100*eig4Cmat.Q) / sum(eig4Cmat.Q))
# Calculate factor scores for the first three dimensions
nk       <- 3
F4Cmat.Q   <- eigenCmat.Q$vectors[,1:nk] %*% diag(eig4Cmat.Q[1:nk]^(1/2))
# Prep for plotting
Shortnames4Participants.Q <-  dimnames(thebrick[[3]])
rownames(F4Cmat.Q) <- Shortnames4Participants.Q
# Make labels
labels4RV.Q <- createxyLabels.gen(1,2,lambda = eig4Cmat.Q, tau = tau4Cmat.Q)
# Scree plot with significance
ScreeInf <- PlotScree(ev = eig4Cmat.Q,
max.ev = NULL, alpha = 0.05,
col.ns = "#006D2C", plotKaiser = TRUE,
title = "Participants Distance Analysis, Musical Qualities Survey: \nExplained Variance per Dimension")
a000.00.screeRV <-  recordPlot()
dim1eigperc <- round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[1]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2)
dim2eigperc <- round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[2]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2)
dim3eigperc <- round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[3]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2)
`r sum(dim1eigperc, dim2eigperc, dim3eigperc)`
dim1eigperc <- round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[1]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2)
dim2eigperc <- round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[2]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2)
dim3eigperc <- round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[3]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2)
sum(dim1eigperc, dim2eigperc, dim3eigperc)
mus.scree <- PlotScree(dimcares.inf$Fixed.Data$ExPosition.Data$eigs,
dimcares.inf$Inference.Data$components$p.vals,
plotKaiser = T, color4Kaiser = "red"
)
mus.00.scree <- recordPlot()
sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[1:5])
sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[1:3])
round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[3]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2)
round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[1:3]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2)
sum(round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[1:3]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2))
sum(round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[1:5]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2))
sum(round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[1:4]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2))
sum(round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[1:8]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2))
sum(round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[1:10]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2))
sum(round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[1:12]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2))
sum(round(100*(dimcares.inf$Fixed.Data$ExPosition.Data$eigs[1:11]/sum(dimcares.inf$Fixed.Data$ExPosition.Data$eigs)), 2))
load("excerptsdesign.RData")
col4exgrp <- excerptsdesign$ex.design$col4exgrp
ex.cols <- excerptsdesign$ex.design$ex.cols
signed.ctrI <- dimcares.inf$Fixed.Data$ExPosition.Data$ci * sign(FIsym)
signed.ctrJ <- dimcares.inf$Fixed.Data$ExPosition.Data$cj * sign(FJs)
CIlist.dim <- vector(mode = "list", length = 3)
CJlist.dim <- vector(mode = "list", length= 3)
names(CIlist.dim) <- c("Dim1", "Dim2", "Dim3")
names(CJlist.dim) <- c("Dim1", "Dim2", "Dim3")
for (i in 1:3){
CIlist.dim[[i]] <- signed.ctrI[which(abs(signed.ctrI[,i]) > 1/nrow(signed.ctrI)),i]
CJlist.dim[[i]] <- signed.ctrJ[which(abs(signed.ctrJ[,i]) > 1/nrow(signed.ctrJ)),i]
}
col4barsQ <- vector(mode = "list", length = 6)
names(col4barsQ) <- c("IDim1", "JDim1", "IDim2", "JDim2", "IDim3", "JDim3")
nrows <- nrow(signed.ctrI)
# plot contributions of rows for component 1
ctrI.1 <- PrettyBarPlot2(CIlist.dim$Dim1,
threshold = 1 / NROW(signed.ctrI),
font.size = 3,
color4bar = col4exgrp[which(abs(signed.ctrI[,1]) > 1/nrow(signed.ctrI))] , # we need hex code
ylab = 'Contributions', #sortValues = TRUE,
ylim = c(1.2*min(signed.ctrI[,1]), 1.2*max(signed.ctrI[,1]))
) #+ ggtitle("Component 1", subtitle = 'Rows')
# plot contributions of columns for component 1
ctrJ.1 <- PrettyBarPlot2(CJlist.dim$Dim1,
threshold = 1 / NROW(signed.ctrJ),
font.size = 3,
color4bar = col4cols[which(abs(signed.ctrJ[,1]) > 1/nrow(signed.ctrJ))], # we need hex code
ylab = 'Contributions',
ylim = c(1.2*min(signed.ctrJ[,1]), 1.2*max(signed.ctrJ[,1]))
) #+ ggtitle("", subtitle = 'Columns')
# plot contributions of rows for component 2
ctrI.2 <- PrettyBarPlot2(CIlist.dim$Dim2,
threshold = 1 / NROW(signed.ctrI),
font.size = 3,
color4bar = col4exgrp[which(abs(signed.ctrI[,2]) > 1/nrow(signed.ctrI))] , # we need hex code
ylab = 'Contributions',
ylim = c(1.2*min(signed.ctrI[,2]), 1.2*max(signed.ctrI[,2]))
) #+ ggtitle("Component 2", subtitle = 'Rows')
# plot contributions of columns for component 2
ctrJ.2 <- PrettyBarPlot2(CJlist.dim$Dim2,
threshold = 1 / NROW(signed.ctrJ),
font.size = 3,
color4bar = col4cols[which(abs(signed.ctrJ[,2]) > 1/nrow(signed.ctrJ))], # we need hex code
ylab = 'Contributions',
ylim = c(1.2*min(signed.ctrJ[,2]), 1.2*max(signed.ctrJ[,2]))
)# + ggtitle("", subtitle = 'Columns')
# plot contributions of rows for component 2
ctrI.3 <- PrettyBarPlot2(CIlist.dim$Dim3,
threshold = 1 / NROW(signed.ctrI),
font.size = 3,
color4bar = col4exgrp[which(abs(signed.ctrI[,3]) > 1/nrow(signed.ctrI))] , # we need hex code
ylab = 'Contributions',
ylim = c(1.2*min(signed.ctrI[,3]), 1.2*max(signed.ctrI[,3]))
)# + ggtitle("Component 3", subtitle = 'Rows')
# plot contributions of columns for component 2
ctrJ.3 <- PrettyBarPlot2(CJlist.dim$Dim3,
threshold = 1 / NROW(signed.ctrJ),
font.size = 3,
color4bar = col4cols[which(abs(signed.ctrJ[,3]) > 1/nrow(signed.ctrJ))], # we need hex code
ylab = 'Contributions',
ylim = c(1.2*min(signed.ctrJ[,3]), 1.2*max(signed.ctrJ[,3]))
)# + ggtitle("", subtitle = 'Columns')
grid.arrange(
as.grob(ctrI.1),as.grob(ctrJ.1),
as.grob(ctrI.2),as.grob(ctrJ.2),
#    as.grob(ctrI.3),as.grob(ctrJ.3),
ncol = 2,nrow = 2,
top = textGrob("Contributions", gp = gpar(fontsize = 18, font = 3))
)
Ctr.IJ <- recordPlot()
#1 - blue, 2 - red, 3 - green, 4 - yellow
axisone = 1
axistwo = 2
exmap.asym <- createFactorMapIJ(RenormFi$G_A,
FJs,
axis1 = axisone,axis2 = axistwo,
col.points.i = col4exgrp,
col.labels.i = col4exgrp,
col.points.j = col4cols,
col.labels.j = col4cols,
text.cex.i = 2.5, text.cex.j = 2.5
)
excerptedges <- c("harm.Blues", "genre.Folk/Country", "tempo.F7",
"artic.Spiccato", "genre.Classical", "meter.Trip",
"dyn.Soft", "tempo.F1")
simplexorder <- match(excerptedges, colnames(musdimdata))
zePoly.J <- PTCA4CATA::ggdrawPolygon(FJs, order2draw = simplexorder)
vc.labels <- createxyLabels(resCA = dimcares.inf$Fixed.Data)
mus.012 <- exmap.asym$baseMap + zePoly.J +
exmap.asym$I_points +
exmap.asym$I_labels +
exmap.asym$J_points +
exmap.asym$J_labels +
vc.labels + ggtitle('Asymmetric Map with Simplex')
print(mus.012)
exmap.asym <- createFactorMapIJ(RenormFi$G_A,
FJs,
axis1 = axisone,axis2 = axistwo,
col.points.i = col4exgrp,
col.labels.i = col4exgrp,
col.points.j = col4cols,
col.labels.j = col4cols,
text.cex.i = 3, text.cex.j = 2.5,
font.face.j = "italic"
)
excerptedges <- c("harm.Blues", "genre.Folk/Country", "tempo.F7",
"artic.Spiccato", "genre.Classical", "meter.Trip",
"dyn.Soft", "tempo.F1")
simplexorder <- match(excerptedges, colnames(musdimdata))
print(mus.012)
exmap.asym <- createFactorMapIJ(RenormFi$G_A,
FJs,
axis1 = axisone,axis2 = axistwo,
col.points.i = col4exgrp,
col.labels.i = col4exgrp,
col.points.j = col4cols,
col.labels.j = col4cols,
text.cex.i = 3, text.cex.j = 2.5,
font.face.j = "italics"
)
excerptedges <- c("harm.Blues", "genre.Folk/Country", "tempo.F7",
"artic.Spiccato", "genre.Classical", "meter.Trip",
"dyn.Soft", "tempo.F1")
simplexorder <- match(excerptedges, colnames(musdimdata))
zePoly.J <- PTCA4CATA::ggdrawPolygon(FJs, order2draw = simplexorder)
vc.labels <- createxyLabels(resCA = dimcares.inf$Fixed.Data)
mus.012 <- exmap.asym$baseMap + zePoly.J +
exmap.asym$I_points +
exmap.asym$I_labels +
exmap.asym$J_points +
exmap.asym$J_labels +
vc.labels + ggtitle('Asymmetric Map with Simplex')
print(mus.012)
axisone = 1
axistwo = 2
exmap.asym <- createFactorMapIJ(RenormFi$G_A,
FJs,
axis1 = axisone,axis2 = axistwo,
col.points.i = col4exgrp,
col.labels.i = col4exgrp,
col.points.j = col4cols,
col.labels.j = col4cols,
text.cex.i = 3, text.cex.j = 2.5,
font.face.j = "italics"
)
excerptedges <- c("harm.Blues", "genre.Folk/Country", "tempo.F7",
"artic.Spiccato", "genre.Classical", "meter.Trip",
"dyn.Soft", "tempo.F1")
simplexorder <- match(excerptedges, colnames(musdimdata))
zePoly.J <- PTCA4CATA::ggdrawPolygon(FJs, order2draw = simplexorder)
vc.labels <- createxyLabels(resCA = dimcares.inf$Fixed.Data)
mus.012 <- exmap.asym$baseMap + zePoly.J +
exmap.asym$I_points +
exmap.asym$I_labels +
exmap.asym$J_points +
exmap.asym$J_labels +
vc.labels + ggtitle('Asymmetric Map with Simplex')
print(mus.012)
axisone = 1
axistwo = 2
exmap.asym <- createFactorMapIJ(RenormFi$G_A,
FJs,
axis1 = axisone,axis2 = axistwo,
col.points.i = col4exgrp,
col.labels.i = col4exgrp,
col.points.j = col4cols,
col.labels.j = col4cols,
text.cex.i = 3, text.cex.j = 2.5,
font.face.j = "italic"
)
excerptedges <- c("harm.Blues", "genre.Folk/Country", "tempo.F7",
"artic.Spiccato", "genre.Classical", "meter.Trip",
"dyn.Soft", "tempo.F1")
simplexorder <- match(excerptedges, colnames(musdimdata))
zePoly.J <- PTCA4CATA::ggdrawPolygon(FJs, order2draw = simplexorder)
vc.labels <- createxyLabels(resCA = dimcares.inf$Fixed.Data)
mus.012 <- exmap.asym$baseMap + zePoly.J +
exmap.asym$I_points +
exmap.asym$I_labels +
exmap.asym$J_points +
exmap.asym$J_labels +
vc.labels + ggtitle('Asymmetric Map with Simplex')
print(mus.012)
rownames(RenormFi$G_A)<- c(1:5,7:13,15:30)
exmap.asym <- createFactorMapIJ(RenormFi$G_A,
FJs,
axis1 = axisone,axis2 = axistwo,
col.points.i = col4exgrp,
col.labels.i = col4exgrp,
col.points.j = col4cols,
col.labels.j = col4cols,
text.cex.i = 3, text.cex.j = 2.5,
font.face.j = "italic"
)
excerptedges <- c("harm.Blues", "genre.Folk/Country", "tempo.F7",
"artic.Spiccato", "genre.Classical", "meter.Trip",
"dyn.Soft", "tempo.F1")
simplexorder <- match(excerptedges, colnames(musdimdata))
zePoly.J <- PTCA4CATA::ggdrawPolygon(FJs, order2draw = simplexorder)
vc.labels <- createxyLabels(resCA = dimcares.inf$Fixed.Data)
mus.012 <- exmap.asym$baseMap + zePoly.J +
exmap.asym$I_points +
exmap.asym$I_labels +
exmap.asym$J_points +
exmap.asym$J_labels +
vc.labels + ggtitle('Asymmetric Map with Simplex')
print(mus.012)
axisone = 1
axistwo = 2
rownames(RenormFi$G_A)<- c(1:5,7:13,15:30)
exmap.asym <- createFactorMapIJ(RenormFi$G_A,
FJs,
axis1 = axisone,axis2 = axistwo,
col.points.i = col4exgrp,
col.labels.i = col4exgrp,
col.points.j = col4cols,
col.labels.j = col4cols,
text.cex.i = 4, text.cex.j = 2.5,
font.face.j = "italic"
)
excerptedges <- c("harm.Blues", "genre.Folk/Country", "tempo.F7",
"artic.Spiccato", "genre.Classical", "meter.Trip",
"dyn.Soft", "tempo.F1")
simplexorder <- match(excerptedges, colnames(musdimdata))
zePoly.J <- PTCA4CATA::ggdrawPolygon(FJs, order2draw = simplexorder)
vc.labels <- createxyLabels(resCA = dimcares.inf$Fixed.Data)
mus.012 <- exmap.asym$baseMap + zePoly.J +
exmap.asym$I_points +
exmap.asym$I_labels +
exmap.asym$J_points +
exmap.asym$J_labels +
vc.labels + ggtitle('Asymmetric Map with Simplex')
print(mus.012)
axisone = 1
axistwo = 2
rownames(RenormFi$G_A)<- c(1:5,7:13,15:30)
exmap.asym <- createFactorMapIJ(RenormFi$G_A,
FJs,
axis1 = axisone,axis2 = axistwo,
col.points.i = col4exgrp,
col.labels.i = col4exgrp,
col.points.j = col4cols,
col.labels.j = col4cols,
text.cex.i = 4, text.cex.j = 2.5,
font.face.i = "italic"
)
excerptedges <- c("harm.Blues", "genre.Folk/Country", "tempo.F7",
"artic.Spiccato", "genre.Classical", "meter.Trip",
"dyn.Soft", "tempo.F1")
simplexorder <- match(excerptedges, colnames(musdimdata))
zePoly.J <- PTCA4CATA::ggdrawPolygon(FJs, order2draw = simplexorder)
vc.labels <- createxyLabels(resCA = dimcares.inf$Fixed.Data)
mus.012 <- exmap.asym$baseMap + zePoly.J +
exmap.asym$I_points +
exmap.asym$I_labels +
exmap.asym$J_points +
exmap.asym$J_labels +
vc.labels + ggtitle('Asymmetric Map with Simplex')
print(mus.012)
# Scree plot with significance
ScreeInf <- PlotScree(ev = eig4Cmat.Q,
max.ev = NULL, alpha = 0.05,
col.ns = "#006D2C", plotKaiser = TRUE,
title = "Participants Distance Analysis, Musical Qualities Survey: \nExplained Variance per Dimension")
a000.00.screeRV <-  recordPlot()
