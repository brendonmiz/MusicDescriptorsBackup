# simplex should be drawn.
excerptedges <- c("Fast", "Aggressive", "Disturbing", "Dark", "Sad",
"Slow", "Soft", "Warm", "Happy")
simplexorder <- match(excerptedges, colnames(adj.contingency))
zePoly.J <- PTCA4CATA::ggdrawPolygon(FJs.adj, order2draw = simplexorder)
vc.labels <- createxyLabels(resCA = adjsym.cares)
am.labels <- createxyLabels(resCA = adj.am.cares)
fr.labels <- createxyLabels(resCA = adj.fr.cares)
exmap.am <- createFactorMapIJ(am.FI,
am.FJ,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 5, text.cex.j = 3.5, font.face.j = 'italic'
)
exmap.fr <- createFactorMapIJ(fr.FI,
fr.FJ,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 5, text.cex.j = 3.5, font.face.j = 'italic'
)
mus.adj.am <- exmap.am$baseMap +
exmap.am$I_points +
exmap.am$I_labels +
exmap.am$J_points +
exmap.am$J_labels +
am.labels + ggtitle('American Participants')
mus.adj.fr <- exmap.fr$baseMap +
exmap.fr$I_points +
exmap.fr$I_labels +
exmap.fr$J_points +
exmap.fr$J_labels +
fr.labels + ggtitle('French Participants')
mus.adj.004 <- exmap$baseMap + #zePoly.J +
exmap$I_points +
exmap$I_labels +
exmap$J_points +
exmap$J_labels +
vc.labels + ggtitle('Symmetric Map of Row and Column Factor Scores')
grid.arrange(
as.grob(mus.adj.am),as.grob(mus.adj.fr),
ncol = 2,nrow = 1,
top = textGrob("Symmetric Maps of the Row and Column Factor Scores", gp = gpar(fontsize = 18, font = 3))
)
am_fr_adjmaps <- recordPlot()
print(mus.adj.004)
dim(FIsym.adj)
length(cols$ex.oc)
dim(FFJs.adj)
dim(FJs.adj)
length(cols$adj.oc)
exmap <- createFactorMapIJ(FIsym.adj,
FJs.adj,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 3.5, text.cex.j = 3.5
)
mus.adj.004 <- exmap$baseMap + #zePoly.J +
exmap$I_points +
exmap$I_labels +
exmap$J_points +
exmap$J_labels +
vc.labels + ggtitle('Symmetric Map of Row and Column Factor Scores'
print(mus.adj.004)
mus.adj.004 <- exmap$baseMap + #zePoly.J +
exmap$I_points +
exmap$I_labels +
exmap$J_points +
exmap$J_labels +
vc.labels + ggtitle('Symmetric Map of Row and Column Factor Scores')
print(mus.adj.004)
print(mus.adj.004)
adjbrick.AM <- adjbrick[,,1:length(which(adj.catadata.list$partcols$nationality == "AM"))]
adj.cont.AM <- apply(adjbrick.AM, c(1,2), sum)
adjbrick.FR <- adjbrick[,,(length(which(adj.catadata.list$partcols$nationality == "AM"))+1):dim(adjbrick)[[3]]]
adj.cont.FR <- apply(adjbrick.FR, c(1,2), sum)
adj.fr.cares <- epCA(adj.cont.FR, symmetric = TRUE)
adj.am.cares <- epCA(adj.cont.AM, symmetric = TRUE)
adj.fr.cares$ExPosition.Data$fi[,2] <- adj.fr.cares$ExPosition.Data$fi[,2]*-1
adj.fr.cares$ExPosition.Data$fj[,2] <- adj.fr.cares$ExPosition.Data$fj[,2]*-1
am.FI <- adj.am.cares$ExPosition.Data$fi
am.FJ <- adj.am.cares$ExPosition.Data$fj
fr.FI <- adj.fr.cares$ExPosition.Data$fi
fr.FJ <- adj.fr.cares$ExPosition.Data$fj
rownames(am.FI) <- rownames(fr.FI) <- c(1:30)
colnames(adjrenorm$G_A) <- colnames(FJs.adj)
axisone <- 1
axistwo <- 2
exmap <- createFactorMapIJ(FIsym.adj,
FJs.adj,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 3.5, text.cex.j = 3.5
)
# It's a fairly complex simplex, so we specify the vertices between which the
# simplex should be drawn.
excerptedges <- c("Fast", "Aggressive", "Disturbing", "Dark", "Sad",
"Slow", "Soft", "Warm", "Happy")
simplexorder <- match(excerptedges, colnames(adj.contingency))
zePoly.J <- PTCA4CATA::ggdrawPolygon(FJs.adj, order2draw = simplexorder)
vc.labels <- createxyLabels(resCA = adjsym.cares)
am.labels <- createxyLabels(resCA = adj.am.cares)
fr.labels <- createxyLabels(resCA = adj.fr.cares)
exmap.am <- createFactorMapIJ(am.FI,
am.FJ,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 5, text.cex.j = 3.5, font.face.j = 'italic'
)
exmap.fr <- createFactorMapIJ(fr.FI,
fr.FJ,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 5, text.cex.j = 3.5, font.face.j = 'italic'
)
mus.adj.am <- exmap.am$baseMap +
exmap.am$I_points +
exmap.am$I_labels +
exmap.am$J_points +
exmap.am$J_labels +
am.labels + ggtitle('American Participants')
mus.adj.fr <- exmap.fr$baseMap +
exmap.fr$I_points +
exmap.fr$I_labels +
exmap.fr$J_points +
exmap.fr$J_labels +
fr.labels + ggtitle('French Participants')
mus.adj.004 <- exmap$baseMap + #zePoly.J +
exmap$I_points +
exmap$I_labels +
exmap$J_points +
exmap$J_labels +
vc.labels + ggtitle('Symmetric Map of Row and Column Factor Scores')
grid.arrange(
as.grob(mus.adj.am),as.grob(mus.adj.fr),
ncol = 2,nrow = 1,
top = textGrob("Symmetric Maps of the Row and Column Factor Scores", gp = gpar(fontsize = 18, font = 3))
)
am_fr_adjmaps <- recordPlot()
print(mus.adj.004)
adjbrick.AM <- adjbrick[,,1:length(which(adj.catadata.list$partcols$nationality == "AM"))]
adj.cont.AM <- apply(adjbrick.AM, c(1,2), sum)
adjbrick.FR <- adjbrick[,,(length(which(adj.catadata.list$partcols$nationality == "AM"))+1):dim(adjbrick)[[3]]]
adj.cont.FR <- apply(adjbrick.FR, c(1,2), sum)
adj.fr.cares <- epCA(adj.cont.FR, symmetric = TRUE)
adj.am.cares <- epCA(adj.cont.AM, symmetric = TRUE)
adj.fr.cares$ExPosition.Data$fi[,2] <- adj.fr.cares$ExPosition.Data$fi[,2]*-1
adj.fr.cares$ExPosition.Data$fj[,2] <- adj.fr.cares$ExPosition.Data$fj[,2]*-1
am.FI <- adj.am.cares$ExPosition.Data$fi
am.FJ <- adj.am.cares$ExPosition.Data$fj
fr.FI <- adj.fr.cares$ExPosition.Data$fi
fr.FJ <- adj.fr.cares$ExPosition.Data$fj
rownames(am.FI) <- rownames(fr.FI) <- rownames(FIsym.adj) c(1:30)
adjbrick.AM <- adjbrick[,,1:length(which(adj.catadata.list$partcols$nationality == "AM"))]
adj.cont.AM <- apply(adjbrick.AM, c(1,2), sum)
adjbrick.FR <- adjbrick[,,(length(which(adj.catadata.list$partcols$nationality == "AM"))+1):dim(adjbrick)[[3]]]
adj.cont.FR <- apply(adjbrick.FR, c(1,2), sum)
adj.fr.cares <- epCA(adj.cont.FR, symmetric = TRUE)
adj.am.cares <- epCA(adj.cont.AM, symmetric = TRUE)
adj.fr.cares$ExPosition.Data$fi[,2] <- adj.fr.cares$ExPosition.Data$fi[,2]*-1
adj.fr.cares$ExPosition.Data$fj[,2] <- adj.fr.cares$ExPosition.Data$fj[,2]*-1
am.FI <- adj.am.cares$ExPosition.Data$fi
am.FJ <- adj.am.cares$ExPosition.Data$fj
fr.FI <- adj.fr.cares$ExPosition.Data$fi
fr.FJ <- adj.fr.cares$ExPosition.Data$fj
rownames(am.FI) <- rownames(fr.FI) <- rownames(FIsym.adj) <- c(1:30)
colnames(adjrenorm$G_A) <- colnames(FJs.adj)
axisone <- 1
axistwo <- 2
exmap <- createFactorMapIJ(FIsym.adj,
FJs.adj,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 3.5, text.cex.j = 3.5,
font.face.j = 'italics',
)
# It's a fairly complex simplex, so we specify the vertices between which the
# simplex should be drawn.
excerptedges <- c("Fast", "Aggressive", "Disturbing", "Dark", "Sad",
"Slow", "Soft", "Warm", "Happy")
simplexorder <- match(excerptedges, colnames(adj.contingency))
zePoly.J <- PTCA4CATA::ggdrawPolygon(FJs.adj, order2draw = simplexorder)
vc.labels <- createxyLabels(resCA = adjsym.cares)
am.labels <- createxyLabels(resCA = adj.am.cares)
fr.labels <- createxyLabels(resCA = adj.fr.cares)
exmap.am <- createFactorMapIJ(am.FI,
am.FJ,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 5, text.cex.j = 3.5, font.face.j = 'italic'
)
exmap.fr <- createFactorMapIJ(fr.FI,
fr.FJ,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 5, text.cex.j = 3.5, font.face.j = 'italic'
)
mus.adj.am <- exmap.am$baseMap +
exmap.am$I_points +
exmap.am$I_labels +
exmap.am$J_points +
exmap.am$J_labels +
am.labels + ggtitle('American Participants')
mus.adj.fr <- exmap.fr$baseMap +
exmap.fr$I_points +
exmap.fr$I_labels +
exmap.fr$J_points +
exmap.fr$J_labels +
fr.labels + ggtitle('French Participants')
mus.adj.004 <- exmap$baseMap + #zePoly.J +
exmap$I_points +
exmap$I_labels +
exmap$J_points +
exmap$J_labels +
vc.labels + ggtitle('Symmetric Map of Row and Column Factor Scores')
grid.arrange(
as.grob(mus.adj.am),as.grob(mus.adj.fr),
ncol = 2,nrow = 1,
top = textGrob("Symmetric Maps of the Row and Column Factor Scores", gp = gpar(fontsize = 18, font = 3))
)
am_fr_adjmaps <- recordPlot()
print(mus.adj.004)
adjbrick.AM <- adjbrick[,,1:length(which(adj.catadata.list$partcols$nationality == "AM"))]
adj.cont.AM <- apply(adjbrick.AM, c(1,2), sum)
adjbrick.FR <- adjbrick[,,(length(which(adj.catadata.list$partcols$nationality == "AM"))+1):dim(adjbrick)[[3]]]
adj.cont.FR <- apply(adjbrick.FR, c(1,2), sum)
adj.fr.cares <- epCA(adj.cont.FR, symmetric = TRUE)
adj.am.cares <- epCA(adj.cont.AM, symmetric = TRUE)
adj.fr.cares$ExPosition.Data$fi[,2] <- adj.fr.cares$ExPosition.Data$fi[,2]*-1
adj.fr.cares$ExPosition.Data$fj[,2] <- adj.fr.cares$ExPosition.Data$fj[,2]*-1
am.FI <- adj.am.cares$ExPosition.Data$fi
am.FJ <- adj.am.cares$ExPosition.Data$fj
fr.FI <- adj.fr.cares$ExPosition.Data$fi
fr.FJ <- adj.fr.cares$ExPosition.Data$fj
rownames(am.FI) <- rownames(fr.FI) <- rownames(FIsym.adj) <- c(1:30)
colnames(adjrenorm$G_A) <- colnames(FJs.adj)
axisone <- 1
axistwo <- 2
exmap <- createFactorMapIJ(FIsym.adj,
FJs.adj,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 3.5, text.cex.j = 3.5,
font.face.j = 'italic',
)
# It's a fairly complex simplex, so we specify the vertices between which the
# simplex should be drawn.
excerptedges <- c("Fast", "Aggressive", "Disturbing", "Dark", "Sad",
"Slow", "Soft", "Warm", "Happy")
simplexorder <- match(excerptedges, colnames(adj.contingency))
zePoly.J <- PTCA4CATA::ggdrawPolygon(FJs.adj, order2draw = simplexorder)
vc.labels <- createxyLabels(resCA = adjsym.cares)
am.labels <- createxyLabels(resCA = adj.am.cares)
fr.labels <- createxyLabels(resCA = adj.fr.cares)
exmap.am <- createFactorMapIJ(am.FI,
am.FJ,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 5, text.cex.j = 3.5, font.face.j = 'italic'
)
exmap.fr <- createFactorMapIJ(fr.FI,
fr.FJ,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 5, text.cex.j = 3.5, font.face.j = 'italic'
)
mus.adj.am <- exmap.am$baseMap +
exmap.am$I_points +
exmap.am$I_labels +
exmap.am$J_points +
exmap.am$J_labels +
am.labels + ggtitle('American Participants')
mus.adj.fr <- exmap.fr$baseMap +
exmap.fr$I_points +
exmap.fr$I_labels +
exmap.fr$J_points +
exmap.fr$J_labels +
fr.labels + ggtitle('French Participants')
mus.adj.004 <- exmap$baseMap + #zePoly.J +
exmap$I_points +
exmap$I_labels +
exmap$J_points +
exmap$J_labels +
vc.labels + ggtitle('Symmetric Map of Row and Column Factor Scores')
grid.arrange(
as.grob(mus.adj.am),as.grob(mus.adj.fr),
ncol = 2,nrow = 1,
top = textGrob("Symmetric Maps of the Row and Column Factor Scores", gp = gpar(fontsize = 18, font = 3))
)
am_fr_adjmaps <- recordPlot()
print(mus.adj.004)
adjsym.cares <- epCA(adj.contingency,
symmetric = TRUE)
adjrenorm <- CARenormalization(adjsym.cares$ExPosition.Data$fi,
delta = adjsym.cares$ExPosition.Data$pdq$Dv,
singularValues = T,
masses = adjsym.cares$ExPosition.Data$M
)
FIsym.adj <- adjsym.cares$ExPosition.Data$fi
FIasym.adj <- adjrenorm$G_A
FJs.adj <- adjsym.cares$ExPosition.Data$fj
CAEigs.adj <- adjsym.cares$ExPosition.Data$eigs
adjbrick.AM <- adjbrick[,,1:length(which(adj.catadata.list$partcols$nationality == "AM"))]
adj.cont.AM <- apply(adjbrick.AM, c(1,2), sum)
adjbrick.FR <- adjbrick[,,(length(which(adj.catadata.list$partcols$nationality == "AM"))+1):dim(adjbrick)[[3]]]
adj.cont.FR <- apply(adjbrick.FR, c(1,2), sum)
adj.fr.cares <- epCA(adj.cont.FR, symmetric = TRUE)
adj.am.cares <- epCA(adj.cont.AM, symmetric = TRUE)
adj.fr.cares$ExPosition.Data$fi[,2] <- adj.fr.cares$ExPosition.Data$fi[,2]*-1
adj.fr.cares$ExPosition.Data$fj[,2] <- adj.fr.cares$ExPosition.Data$fj[,2]*-1
am.FI <- adj.am.cares$ExPosition.Data$fi
am.FJ <- adj.am.cares$ExPosition.Data$fj
fr.FI <- adj.fr.cares$ExPosition.Data$fi
fr.FJ <- adj.fr.cares$ExPosition.Data$fj
rownames(am.FI) <- rownames(fr.FI) <- rownames(FIsym.adj) <- c(1:30)
colnames(adjrenorm$G_A) <- colnames(FJs.adj)
axisone <- 1
axistwo <- 2
exmap <- createFactorMapIJ(FIsym.adj,
FJs.adj,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 3.5, text.cex.j = 3.5,
font.face.j = 'italic',
)
# It's a fairly complex simplex, so we specify the vertices between which the
# simplex should be drawn.
excerptedges <- c("Fast", "Aggressive", "Disturbing", "Dark", "Sad",
"Slow", "Soft", "Warm", "Happy")
simplexorder <- match(excerptedges, colnames(adj.contingency))
zePoly.J <- PTCA4CATA::ggdrawPolygon(FJs.adj, order2draw = simplexorder)
vc.labels <- createxyLabels(resCA = adjsym.cares)
am.labels <- createxyLabels(resCA = adj.am.cares)
fr.labels <- createxyLabels(resCA = adj.fr.cares)
exmap.am <- createFactorMapIJ(am.FI,
am.FJ,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 5, text.cex.j = 3.5, font.face.j = 'italic'
)
exmap.fr <- createFactorMapIJ(fr.FI,
fr.FJ,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 5, text.cex.j = 3.5, font.face.j = 'italic'
)
mus.adj.am <- exmap.am$baseMap +
exmap.am$I_points +
exmap.am$I_labels +
exmap.am$J_points +
exmap.am$J_labels +
am.labels + ggtitle('American Participants')
mus.adj.fr <- exmap.fr$baseMap +
exmap.fr$I_points +
exmap.fr$I_labels +
exmap.fr$J_points +
exmap.fr$J_labels +
fr.labels + ggtitle('French Participants')
mus.adj.004 <- exmap$baseMap + #zePoly.J +
exmap$I_points +
exmap$I_labels +
exmap$J_points +
exmap$J_labels +
vc.labels + ggtitle('Symmetric Map of Row and Column Factor Scores')
grid.arrange(
as.grob(mus.adj.am),as.grob(mus.adj.fr),
ncol = 2,nrow = 1,
top = textGrob("Symmetric Maps of the Row and Column Factor Scores", gp = gpar(fontsize = 18, font = 3))
)
am_fr_adjmaps <- recordPlot()
print(mus.adj.004)
library(MExPosition)
adj4MFA <- abind(adj.cont.FR, adj.cont.AM, along = 2)
frvec <- t(as.data.frame(rep("FR", length.out = dim(adj.cont.FR)[2])))
amvec <- t(as.data.frame(rep("AM", length.out = dim(adj.cont.AM)[2])))
colnames(frvec) <- colnames(amvec) <- colnames(adj.cont.FR)
rownames(frvec) <- rownames(amvec) <- "group"
mfagroups <- abind(frvec, amvec, along = 2)
mfares <- mpMFA(adj4MFA, mfagroups)
renameCols <- function(x){
colnames(x) <- paste("Dimension", 1:ncol(x))
x
}
RVmat <- mfares$mexPosition.Data$InnerProduct$RVMatrix
#corrplot(RVmat, method = "color", addCoefasPercent = TRUE)
Eig4scree <- mfares$mexPosition.Data$Table$eigs
#mfascree <- PlotScree(Eig4scree, plotKaiser = TRUE)
MFA_FMap <- createFactorMap(
mfares$mexPosition.Data$Table$fi,
col.points = cols$ex.oc,
col.labels = cols$ex.oc,
alpha.points = .6,
pch = 17,
cex = 5,
display.labels = TRUE,
constraints = minmaxHelper4Partial(FactorScores = mfares$mexPosition.Data$Table$fi,
partialFactorScores = mfares$mexPosition.Data$Table$partial.fi.array)
)
label4Map <- createxyLabels.gen(1,2,
lambda = mfares$mexPosition.Data$Table$eigs,
tau = mfares$mexPosition.Data$Table$t,
axisName = "Dimension ")
fi4pfs <- mfares$mexPosition.Data$Table$fi
fi4pfs <- renameCols(fi4pfs)
pfi4pfs <- mfares$mexPosition.Data$Table$partial.fi.array
pfi4pfs <- renameCols(pfi4pfs)
rownames(pfi4pfs) <- c(1:30)
dimnames(pfi4pfs)[[3]] <- c("FR", "AM")
map4PFS <- createPartialFactorScoresMap(
factorScores = fi4pfs,
partialFactorScores = pfi4pfs,
axis1 = 1, axis2 = 2,
colors4Items = cols$ex.oc,
names4Partial = c("FR", "AM"),
font.labels = 'bold'
)
partialfsmap <- MFA_FMap$zeMap +
label4Map +
map4PFS$linesColByItems +
map4PFS$pointsColByItems +
map4PFS$labelsColByItems +
ggtitle("Contributions to the Excerpts Factor Scores")
#print(partialfsmap)
mfasbs <- grid.arrange(as.grob(partialfsmap),
as.grob(partialfsmap.t),
ncol = 2, nrow = 1,
top = textGrob("Partial Factor Scores Plots for French and American Participants"))
print(mfasbs)
grid.arrange(as.grob(partialfsmap),
as.grob(partialfsmap.t),
ncol = 2, nrow = 1,
top = textGrob("Partial Factor Scores Plots for French and American Participants"))
mfasbs <- recordPlot()
adjbrick.AM <- adjbrick[,,1:length(which(adj.catadata.list$partcols$nationality == "AM"))]
adj.cont.AM <- apply(adjbrick.AM, c(1,2), sum)
adjbrick.FR <- adjbrick[,,(length(which(adj.catadata.list$partcols$nationality == "AM"))+1):dim(adjbrick)[[3]]]
adj.cont.FR <- apply(adjbrick.FR, c(1,2), sum)
adj.fr.cares <- epCA(adj.cont.FR, symmetric = TRUE)
adj.am.cares <- epCA(adj.cont.AM, symmetric = TRUE)
adj.fr.cares$ExPosition.Data$fi[,2] <- adj.fr.cares$ExPosition.Data$fi[,2]*-1
adj.fr.cares$ExPosition.Data$fj[,2] <- adj.fr.cares$ExPosition.Data$fj[,2]*-1
am.FI <- adj.am.cares$ExPosition.Data$fi
am.FJ <- adj.am.cares$ExPosition.Data$fj
fr.FI <- adj.fr.cares$ExPosition.Data$fi
fr.FJ <- adj.fr.cares$ExPosition.Data$fj
rownames(am.FI) <- rownames(fr.FI) <- rownames(FIsym.adj) <- c(1:30)
colnames(adjrenorm$G_A) <- colnames(FJs.adj)
axisone <- 1
axistwo <- 2
exmap <- createFactorMapIJ(FIsym.adj,
FJs.adj,
axis1 = axisone,axis2 = axistwo,
col.points.i = cols$ex.oc,
col.labels.i = cols$ex.oc,
col.points.j = cols$adj.oc,
col.labels.j = cols$adj.oc,
text.cex.i = 3.5, text.cex.j = 3.5,
font.face.j = 'italic',
)
# It's a fairly complex simplex, so we specify the vertices between which the
# simplex should be drawn.
#excerptedges <- c("Fast", "Aggressive", "Disturbing", "Dark", "Sad",
"Slow", "Soft", "Warm", "Happy")
adjbrick.AM <- adjbrick[,,1:length(which(adj.catadata.list$partcols$nationality == "AM"))]
adj.cont.AM <- apply(adjbrick.AM, c(1,2), sum)
adjbrick.FR <- adjbrick[,,(length(which(adj.catadata.list$partcols$nationality == "AM"))+1):dim(adjbrick)[[3]]]
adj.cont.FR <- apply(adjbrick.FR, c(1,2), sum)
adj.fr.cares <- epCA(adj.cont.FR, symmetric = TRUE)
