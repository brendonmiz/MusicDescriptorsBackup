"0","# Bootstrapping"
"0","bootCA.adj <- Boot4PTCA(ZeDataCube = adjbrick,"
"0","                        fi = FIsym.adj,"
"0","                        fj = FJs.adj,"
"0","                        eigs = CAEigs.adj,"
"0","                        nf2keep = 3,"
"0","                        nBootIter = 500)"
"0","# Compute Bootstrapped ratios"
"0","bootRatadj.I <- PTCA4CATA::boot.ratio.test(bootCA.adj$RowsBoot,"
"0","                                            critical.value = 2)"
"0","bootRatadj.J <- PTCA4CATA::boot.ratio.test(bootCA.adj$ColumnsBoot,"
"0","                                              critical.value = 2)"
"0","# Probabilities "
"0","probBRadj.I  <- bootRatadj.I$prob.boot.ratios"
"0","probBRadj.J  <- bootRatadj.J$prob.boot.ratios"
"0",""
"0","# Permutation tests"
"0","adjca.inf <- perm4PTCA(aCube = adjbrick,"
"0","                       nIter = 1000,"
"0","                       permType = 'byRows' ,"
"0","                       Malinvaud = TRUE)"
"0","Ind.Permu.adj    <- adjca.inf$permInertia"
"0","InertiaFixed.adj <- adjca.inf$fixedInertia"
"0","prob.cpt.lst.adj <- adjca.inf$MalinvaudQ['p-perm',]"
"0","# Get the p values for the components"
"0","prob.cpt.adj <- (unlist(prob.cpt.lst.adj[2:length(prob.cpt.lst.adj)]))"
"0","prob.cpt.adj[is.na(prob.cpt.adj)] <- 1"
