"0","# Note that for in order for the loop below to work, "
"0","# the ""Other, please specify:"" With the semicolon has to be listed first "
"0","# in this character vector, otherwise you'll end up with a bunch of semicolons "
"0","# floating around."
"0",""
"0","# We're going to replace these words:"
"0","others <- c(""Not listed/other (please specify)"", ""Other, please specify:"", "
"0","            ""Other, please specify"", ""I do not think this excerpt has a melody"","
"0","            ""I don't think this excerpt has a melody"")"
"0",""
"0","# With these words"
"0","otherreps <- c("""", """", """", ""None"", ""None"")"
"0",""
"0","# We create a list, using each participant as an element in the list, but we"
"0","# remove columns 2, 10, 12, and 14 from the datset."
"0","expertlist <- array_tree(expertarray[,-c(2,10,12,14),], 3)"
"0",""
"0","# What we're left with is there are a few 'other' elements for articulation, "
"0","# which are string-specific articulations, like 'detache', "
"0","# that were submitted by string players."
"0","wordstorecode <- c(theterms$`artic+`)"
"0",""
"0","# After looking through, select which of the terms actually need to be recoded. "
"0","# It looks like we can just drop harm, dyn, cont, & motion"
"0",""
"0","# theterms$`harm+` (col 2)"
"0","# theterms$`dyn+`, (col 11)"
"0","# theterms$`cont+` (col 13)"
"0","# theterms$`motion+` (col 15)"
"0","# theterms$`genre+`,  (col 9)"
"0",""
"0","wordstorecode <- c(others, wordstorecode)"
"0",""
"0","# Once you've done that, go back through "
"0","# wordstorecode and recode the values as necessary"
"0",""
"0","recodedwords <- c(otherreps, ""Pizzicato"", ""Spiccato"", "
"0","                  ""Legato,Staccato"", ""Detache"")"
"0",""
"0","for(i in 1:length(wordstorecode)){"
"0","  expertlist <- map(expertlist, ~gsub(pattern = wordstorecode[i], x = ., "
"0","                                      replacement = recodedwords[i], fixed = T)) "
"0","}"
"0",""
"0","# When using these recoding loops, order is important- for example, if you have"
"0","# a part of a string that is in another, longer, string, the loop will pick up "
"0","# the shorter part within the longer version, like 'Moderate' within "
"0","# 'Moderately Slow', so it will recode only the first part of that, and not the"
"0","# rest of it. So always make sure that the longer string is listed first, "
"0","# so that it will have to read the entire string as a unit and won't replace"
"0","# only part of the string."
"0","choicestorecode <- c(""Moderately Slow"", ""Moderately Fast"","
"0","                     ""Very Sparse"", ""Moderately sparse"", "
"0","                     ""More sparse than dense"",""More dense than sparse"", "
"0","                     ""Moderately Dense"", ""Very Dense"", ""Narrow range"", "
"0","                     ""Moderate range"", ""Wide range"", ""Very wide range"", "
"0","                     ""Extremely wide range"", ""Varied: gradual decrescendo"", "
"0","                     ""Varied: gradual crescendo"", ""Some of each, soft and loud"","
"0","                     ""A combination of conjunct and disjunct"", "
"0","                     ""Diatonic: major"", ""Diatonic: minor"", ""Quintal/Quartal"", "
"0","                      ""Very Slow"", ""Slow"", ""Moderate"", ""Very Fast"", ""Fast"","
"0","                     ""Duple"", ""Triple"", ""Quadruple"")"
"0",""
"0","recodedchoices <- c(""F3"", ""F5"", ""D1"", ""D2"", ""D3"", ""D4"", ""D5"", ""D6"", "
"0","                    ""R.Nar"", ""R.Mod"", ""R.Wid"", ""R.Vwi"", ""R.Ewi"", "
"0","                    ""Gra_Decr"", ""Gra_Cresc"", ""BothS&L"", ""Con&Dis"", ""Major"", "
"0","                    ""Minor"", ""Quin"", ""F1"", ""F2"", ""F4"", ""F7"", ""F6"", "
"0","                    ""Dup"", ""Trip"", ""Quad"")"
"0",""
"0","#Make sure these lists are the same length by checking the following:"
"0","# length(choicestorecode) == length(recodedchoices)"
"0",""
"0","for(i in 1:length(choicestorecode)){"
"0","expertlist <- map(expertlist, ~gsub(pattern = choicestorecode[i], x = ., "
"0","                                    replacement = recodedchoices[i], fixed = T))"
"0","}"
